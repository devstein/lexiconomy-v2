{
  "address": "0x5E665E41dF55470FD7284Cf9E48cE427FC34f7b5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pricer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lemmaValidator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "definition",
          "type": "string"
        }
      ],
      "name": "Definition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        }
      ],
      "name": "Donation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "example",
          "type": "string"
        }
      ],
      "name": "Example",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "lemma",
          "type": "string"
        }
      ],
      "name": "Invent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_lemma",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_definition",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_example",
          "type": "string"
        }
      ],
      "name": "airdrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_text",
          "type": "string"
        }
      ],
      "name": "definition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "donate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_text",
          "type": "string"
        }
      ],
      "name": "example",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_lemma",
          "type": "string"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_lemma",
          "type": "string"
        }
      ],
      "name": "lemmaValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lemmaValidator",
      "outputs": [
        {
          "internalType": "contract StringValidator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lemmas",
      "outputs": [
        {
          "internalType": "string",
          "name": "lemma",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "definition",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "example",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_lemma",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_definition",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_example",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricer",
      "outputs": [
        {
          "internalType": "contract Pricer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricerInterfaceId",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxyRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setLemmaValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setPricer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setProxyRegistryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stringValidatorInterfaceId",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x72b076b7d744b98dd6b5b397cc76d3c9dcec30ac0fe04b3697acf297f5f6f978",
  "receipt": {
    "to": null,
    "from": "0xC7346259a4a2E1ECCb34d7a2b124cbe0D8a98497",
    "contractAddress": "0x5E665E41dF55470FD7284Cf9E48cE427FC34f7b5",
    "transactionIndex": 8,
    "gasUsed": "2974252",
    "logsBloom": "0x
    "blockHash": "0xe527aca10d73b2f7696d8361a1484b8a6cca93cb33c01368a3e9c0b663696213",
    "transactionHash": "0x72b076b7d744b98dd6b5b397cc76d3c9dcec30ac0fe04b3697acf297f5f6f978",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 10595772,
        "transactionHash": "0x72b076b7d744b98dd6b5b397cc76d3c9dcec30ac0fe04b3697acf297f5f6f978",
        "address": "0x5E665E41dF55470FD7284Cf9E48cE427FC34f7b5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c7346259a4a2e1eccb34d7a2b124cbe0d8a98497"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0xe527aca10d73b2f7696d8361a1484b8a6cca93cb33c01368a3e9c0b663696213"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 10595772,
        "transactionHash": "0x72b076b7d744b98dd6b5b397cc76d3c9dcec30ac0fe04b3697acf297f5f6f978",
        "address": "0x5E665E41dF55470FD7284Cf9E48cE427FC34f7b5",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000c7346259a4a2e1eccb34d7a2b124cbe0d8a98497",
        "logIndex": 6,
        "blockHash": "0xe527aca10d73b2f7696d8361a1484b8a6cca93cb33c01368a3e9c0b663696213"
      }
    ],
    "blockNumber": 10595772,
    "cumulativeGasUsed": "4427882",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDdF956e33f238bE394787A4C04EF3038E3307802",
    "0xe93234da8074c55E3de7E2Ba886abD0fC59B000f"
  ],
  "numDeployments": 2,
  "solcInputHash": "c0113a7129626e27a1ab21bf12a3156a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pricer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lemmaValidator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"}],\"name\":\"Definition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"}],\"name\":\"Donation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"example\",\"type\":\"string\"}],\"name\":\"Example\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lemma\",\"type\":\"string\"}],\"name\":\"Invent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_lemma\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_example\",\"type\":\"string\"}],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"definition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"example\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lemma\",\"type\":\"string\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lemma\",\"type\":\"string\"}],\"name\":\"lemmaValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lemmaValidator\",\"outputs\":[{\"internalType\":\"contract StringValidator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lemmas\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"lemma\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"example\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_lemma\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_definition\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_example\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricer\",\"outputs\":[{\"internalType\":\"contract Pricer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricerInterfaceId\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setLemmaValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setProxyRegistryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stringValidatorInterfaceId\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Donation(address)\":{\"details\":\"Donation event for donors because they deserve it\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"definition(uint256,string)\":{\"details\":\"named 'definition' because 'define' is a reserved keyword\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the main Lexiconomy smart contract instance.\"},\"donate()\":{\"notice\":\"Thank you :)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lexiconomy.sol\":\"Lexiconomy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x81c02855bc239e16ec09eee000a8bec691424c715188d6d881037e69c45414c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1cbe42915bc66227970fe99bc0f783eb1de30f2b48f984af01ad45edb9658698\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x483f88fbbb1d6d75000fbe8ce14279b5e6121cd5a29ff5f1b91fed407735a6c3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LemmaToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"./Pricer.sol\\\";\\nimport \\\"./StringValidator.sol\\\";\\nimport \\\"./OpenSea.sol\\\";\\n\\ncontract LemmaToken is\\n  ERC721,\\n  ERC721Enumerable,\\n  ERC721URIStorage,\\n  Pausable,\\n  Ownable\\n{\\n  using ERC165Checker for address;\\n\\n  // BEGIN: Generated by OpenZepplin\\n  constructor() ERC721(\\\"The Lexiconomy v2\\\", \\\"LEX\\\") {}\\n\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  function _baseURI() internal pure override returns (string memory) {\\n    // tokenURI concats the baseURI with the token id\\n    return \\\"https://lexiconomy.org/token/\\\";\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\\n    super._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n    super._burn(tokenId);\\n  }\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    override(ERC721, ERC721URIStorage)\\n    returns (string memory)\\n  {\\n    return super.tokenURI(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    override(ERC721, ERC721Enumerable)\\n    returns (bool)\\n  {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n  // END: Generated by OpenZepplin\\n\\n  // BEGIN: Support OpenSea Trading\\n  address public proxyRegistryAddress;\\n\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    // only execute if proxyRegistryAddress is set\\n    if (proxyRegistryAddress != address(0)) {\\n      // Whitelist OpenSea proxy contract for easy trading\\n      ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n      if (address(proxyRegistry.proxies(owner)) == operator) {\\n        return true;\\n      }\\n    }\\n\\n    return super.isApprovedForAll(owner, operator);\\n  }\\n\\n  function setProxyRegistryAddress(address _address) public onlyOwner {\\n    proxyRegistryAddress = _address;\\n  }\\n\\n  // END: Support OpenSea Trading\\n\\n  /// @dev The Invent event is fired whenever a new lemma is invented\\n  event Invent(address indexed owner, uint256 indexed tokenId, string lemma);\\n\\n  /// @dev Definition event whenever an owner redefines their lemma\\n  event Definition(\\n    address indexed owner,\\n    uint256 indexed tokenId,\\n    string definition\\n  );\\n\\n  /// @dev Example event whenever an owner provides an example for their lemma\\n  event Example(address indexed owner, uint256 indexed tokenId, string example);\\n\\n  struct Lemma {\\n    string lemma;\\n    string definition;\\n    string example;\\n  }\\n\\n  mapping(uint256 => Lemma) public lemmas;\\n\\n  bytes4 public constant pricerInterfaceId = type(Pricer).interfaceId;\\n  Pricer public pricer;\\n\\n  function setPricer(address _address) public onlyOwner {\\n    require(\\n      _address.supportsInterface(pricerInterfaceId),\\n      \\\"LemmaToken: address does not implement the Pricer interface\\\"\\n    );\\n\\n    Pricer candidateContract = Pricer(_address);\\n\\n    // Set the new contract address\\n    pricer = candidateContract;\\n  }\\n\\n  bytes4 public constant stringValidatorInterfaceId =\\n    type(StringValidator).interfaceId;\\n  StringValidator public lemmaValidator;\\n\\n  function setLemmaValidator(address _address) public onlyOwner {\\n    require(\\n      _address.supportsInterface(stringValidatorInterfaceId),\\n      \\\"LemmaToken: address does not implement the StringValidator interface\\\"\\n    );\\n\\n    StringValidator candidateContract = StringValidator(_address);\\n\\n    // Set the new contract address\\n    lemmaValidator = candidateContract;\\n  }\\n\\n  function mintFee() public view returns (uint256) {\\n    return pricer.price();\\n  }\\n\\n  function lemmaValid(string calldata _lemma) public view returns (bool) {\\n    return lemmaValidator.valid(_lemma);\\n  }\\n\\n  function getTokenId(string calldata _lemma) public pure returns (uint256) {\\n    return uint256(keccak256(bytes(_lemma)));\\n  }\\n\\n  function _mint(\\n    address to,\\n    uint256 tokenId,\\n    string calldata _lemma,\\n    string calldata _definition,\\n    string calldata _example\\n  ) internal {\\n    // _safeMint verifies the tokenId doesn't exist\\n    _safeMint(to, tokenId);\\n    lemmas[tokenId] = Lemma(_lemma, _definition, _example);\\n\\n    // emit Invent event to associate metadata with minting a tokenId\\n    // TODO: Consider removing Invent!\\n    emit Invent(to, tokenId, _lemma);\\n    emit Definition(to, tokenId, _definition);\\n    emit Example(to, tokenId, _example);\\n  }\\n\\n  // airdrop for migrating v1 tokens to v2\\n  function airdrop(\\n    address to,\\n    string calldata _lemma,\\n    string calldata _definition,\\n    string calldata _example\\n  ) external onlyOwner returns (uint256 tokenId) {\\n    require(\\n      lemmaValid(_lemma),\\n      \\\"LemmaToken: lemma is invalid: does it contain invalid characters?\\\"\\n    );\\n    tokenId = getTokenId(_lemma);\\n    // _mint verifies the tokenId doesn't exist\\n    _mint(to, tokenId, _lemma, _definition, _example);\\n\\n    return tokenId;\\n  }\\n\\n  function mint(\\n    string calldata _lemma,\\n    string calldata _definition,\\n    string calldata _example\\n  ) public payable returns (uint256 tokenId) {\\n    require(msg.value >= mintFee(), \\\"LemmaToken: minting fee too low\\\");\\n    require(\\n      lemmaValid(_lemma),\\n      \\\"LemmaToken: lemma is invalid: does it contain invalid characters?\\\"\\n    );\\n    tokenId = getTokenId(_lemma);\\n    // _mint verifies the tokenId doesn't exist\\n    _mint(msg.sender, tokenId, _lemma, _definition, _example);\\n\\n    return tokenId;\\n  }\\n\\n  /// @dev named 'definition' because 'define' is a reserved keyword\\n  function definition(uint256 tokenId, string calldata _text)\\n    public\\n    whenNotPaused\\n  {\\n    bool allowed = _isApprovedOrOwner(msg.sender, tokenId);\\n    require(allowed, \\\"LemmaToken: caller is not owner nor approved\\\");\\n\\n    lemmas[tokenId].definition = _text;\\n    emit Definition(msg.sender, tokenId, _text);\\n  }\\n\\n  function example(uint256 tokenId, string calldata _text)\\n    public\\n    whenNotPaused\\n  {\\n    bool allowed = _isApprovedOrOwner(msg.sender, tokenId);\\n    require(allowed, \\\"LemmaToken: caller is not owner nor approved\\\");\\n\\n    lemmas[tokenId].example = _text;\\n    emit Example(msg.sender, tokenId, _text);\\n  }\\n}\\n\",\"keccak256\":\"0x685d6c908292b6caba172425e47cc282ccbc3baa47866c4f7a3b295a93f6db32\",\"license\":\"MIT\"},\"contracts/Lexiconomy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./LemmaToken.sol\\\";\\n\\ncontract Lexiconomy is LemmaToken {\\n  /// @dev Donation event for donors because they deserve it\\n  event Donation(address indexed donor);\\n\\n  /// @notice Creates the main Lexiconomy smart contract instance.\\n  constructor(address _pricer, address _lemmaValidator) {\\n    // Starts paused.\\n    pause();\\n    setPricer(_pricer);\\n    setLemmaValidator(_lemmaValidator);\\n  }\\n\\n  /// @notice Thank you :)\\n  function donate() external payable {\\n    require(msg.value > 0);\\n    emit Donation(msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0x49e5b974c286b240bcedcd6dbbfab2d79d1e6b26be84b91e972b2c2e4f9f63ee\",\"license\":\"MIT\"},\"contracts/OpenSea.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// Taken from: https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/ERC721Tradable.sol\\n// to support easy trading on OpenSea\\ncontract OwnableDelegateProxy {\\n\\n}\\n\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0xf5c38339e37275457fe683d8830df375c5ac0d5c67ec018528f59695969bda33\",\"license\":\"MIT\"},\"contracts/Pricer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface Pricer is IERC165 {\\n  function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6c2b06cc485ad0c16c3bd4ebe8f47e27ed6afde9ad88fec1bed7ecf9b5e4acbf\",\"license\":\"MIT\"},\"contracts/StringValidator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface StringValidator is IERC165 {\\n  function valid(string memory _str) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7440f475e626b7f3a4edd50fc17341f19b4f6d721cf922eccafa9bf809b9a31f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200397d3803806200397d833981016040819052620000349162000659565b60408051808201825260118152702a3432902632bc34b1b7b737b6bc903b1960791b6020808301918252835180850190945260038452620988ab60eb1b908401528151919291620000889160009162000596565b5080516200009e90600190602084019062000596565b5050600b805460ff1916905550620000b633620000de565b620000c062000138565b620000cb8262000199565b620000d68162000299565b505062000737565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600b546001600160a01b036101009091041633146200018d5760405162461bcd60e51b815260206004820181905260248201526000805160206200395d83398151915260448201526064015b60405180910390fd5b62000197620003a7565b565b600b546001600160a01b03610100909104163314620001ea5760405162461bcd60e51b815260206004820181905260248201526000805160206200395d833981519152604482015260640162000184565b6200021463501ad8ff60e11b826001600160a01b03166200044260201b620016181790919060201c565b620002775760405162461bcd60e51b815260206004820152603b60248201526000805160206200393d83398151915260448201527f6c656d656e74207468652050726963657220696e746572666163650000000000606482015260840162000184565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b03610100909104163314620002ea5760405162461bcd60e51b815260206004820181905260248201526000805160206200395d833981519152604482015260640162000184565b62000314639791c09760e01b826001600160a01b03166200044260201b620016181790919060201c565b620003855760405162461bcd60e51b8152602060048201526044602482018190526000805160206200393d833981519152908201527f6c656d656e742074686520537472696e6756616c696461746f7220696e7465726064820152636661636560e01b608482015260a40162000184565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600b5460ff1615620003ef5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640162000184565b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258620004253390565b6040516001600160a01b03909116815260200160405180910390a1565b60006200044f836200046c565b8015620004635750620004638383620004a4565b90505b92915050565b600062000481826301ffc9a760e01b620004a4565b80156200046657506200049d826001600160e01b0319620004a4565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906200050d90869062000691565b6000604051808303818686fa925050503d80600081146200054b576040519150601f19603f3d011682016040523d82523d6000602084013e62000550565b606091505b50915091506020815110156200056d576000935050505062000466565b8180156200058c5750808060200190518101906200058c9190620006cf565b9695505050505050565b828054620005a490620006fa565b90600052602060002090601f016020900481019282620005c8576000855562000613565b82601f10620005e357805160ff191683800117855562000613565b8280016001018555821562000613579182015b8281111562000613578251825591602001919060010190620005f6565b506200062192915062000625565b5090565b5b8082111562000621576000815560010162000626565b80516001600160a01b03811681146200065457600080fd5b919050565b600080604083850312156200066d57600080fd5b62000678836200063c565b915062000688602084016200063c565b90509250929050565b6000825160005b81811015620006b4576020818601810151858301520162000698565b81811115620006c4576000828501525b509190910192915050565b600060208284031215620006e257600080fd5b81518015158114620006f357600080fd5b9392505050565b600181811c908216806200070f57607f821691505b602082108114156200073157634e487b7160e01b600052602260045260246000fd5b50919050565b6131f680620007476000396000f3fe6080604052600436106102305760003560e01c80636352211e1161012e578063a22cb465116100ab578063d26ea6c01161006f578063d26ea6c01461068b578063d645ddf6146106ab578063e985e9c5146106be578063ed88c68e146106de578063f2fde38b146106e657600080fd5b8063a22cb465146105eb578063a6138ed91461060b578063b88d4fde1461062b578063c87b56dd1461064b578063cd7c03261461066b57600080fd5b80638da5cb5b116100f25780638da5cb5b14610544578063906979911461056757806395d89b411461059b57806395df7e56146105b05780639efb8eb1146105cb57600080fd5b80636352211e146104ba57806370a08231146104da578063715018a6146104fa5780637e4fbb831461050f5780638456cb591461052f57600080fd5b80632f745c59116101bc5780634891a178116101805780634891a178146104225780634f6ccce71461044257806352d41014146104625780635c975abb146104825780635ea297681461049a57600080fd5b80632f745c591461037e57806336d469d81461039e5780633f4ba83a146103be57806342842e0e146103d357806347202e5c146103f357600080fd5b806313966db51161020357806313966db5146102e657806318160ddd146103095780631e7663bc1461031e57806323b872dd1461033e578063293903701461035e57600080fd5b806301ffc9a71461023557806306fdde031461026a578063081812fc1461028c578063095ea7b3146102c4575b600080fd5b34801561024157600080fd5b506102556102503660046128d7565b610706565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061027f610717565b604051610261919061294c565b34801561029857600080fd5b506102ac6102a736600461295f565b6107a9565b6040516001600160a01b039091168152602001610261565b3480156102d057600080fd5b506102e46102df36600461298d565b610843565b005b3480156102f257600080fd5b506102fb610959565b604051908152602001610261565b34801561031557600080fd5b506008546102fb565b34801561032a57600080fd5b506102fb610339366004612a02565b6109db565b34801561034a57600080fd5b506102e4610359366004612a44565b6109fd565b34801561036a57600080fd5b506102e4610379366004612a85565b610a2e565b34801561038a57600080fd5b506102fb61039936600461298d565b610b0c565b3480156103aa57600080fd5b506102e46103b9366004612a85565b610ba2565b3480156103ca57600080fd5b506102e4610c8e565b3480156103df57600080fd5b506102e46103ee366004612a44565b610cc8565b3480156103ff57600080fd5b5061041361040e36600461295f565b610ce3565b60405161026193929190612aa2565b34801561042e57600080fd5b5061025561043d366004612a02565b610e9d565b34801561044e57600080fd5b506102fb61045d36600461295f565b610f27565b34801561046e57600080fd5b50600f546102ac906001600160a01b031681565b34801561048e57600080fd5b50600b5460ff16610255565b3480156104a657600080fd5b506102e46104b5366004612adb565b610fba565b3480156104c657600080fd5b506102ac6104d536600461295f565b61106f565b3480156104e657600080fd5b506102fb6104f5366004612a85565b6110e6565b34801561050657600080fd5b506102e461116d565b34801561051b57600080fd5b506102fb61052a366004612b27565b6111a7565b34801561053b57600080fd5b506102e4611227565b34801561055057600080fd5b50600b5461010090046001600160a01b03166102ac565b34801561057357600080fd5b50610582639791c09760e01b81565b6040516001600160e01b03199091168152602001610261565b3480156105a757600080fd5b5061027f61125f565b3480156105bc57600080fd5b5061058263501ad8ff60e11b81565b3480156105d757600080fd5b506102e46105e6366004612adb565b61126e565b3480156105f757600080fd5b506102e4610606366004612be2565b611315565b34801561061757600080fd5b50600e546102ac906001600160a01b031681565b34801561063757600080fd5b506102e4610646366004612c31565b611324565b34801561065757600080fd5b5061027f61066636600461295f565b61135c565b34801561067757600080fd5b50600c546102ac906001600160a01b031681565b34801561069757600080fd5b506102e46106a6366004612a85565b611367565b6102fb6106b9366004612d11565b6113b9565b3480156106ca57600080fd5b506102556106d9366004612dab565b61145e565b6102e461153d565b3480156106f257600080fd5b506102e4610701366004612a85565b611577565b600061071182611634565b92915050565b60606000805461072690612dd9565b80601f016020809104026020016040519081016040528092919081815260200182805461075290612dd9565b801561079f5780601f106107745761010080835404028352916020019161079f565b820191906000526020600020905b81548152906001019060200180831161078257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108275760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061084e8261106f565b9050806001600160a01b0316836001600160a01b031614156108bc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161081e565b336001600160a01b03821614806108d857506108d8813361145e565b61094a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161081e565b6109548383611659565b505050565b600e546040805163501ad8ff60e11b815290516000926001600160a01b03169163a035b1fe916004808301926020929190829003018186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190612e14565b905090565b600082826040516109ed929190612e2d565b6040519081900390209392505050565b610a0733826116c7565b610a235760405162461bcd60e51b815260040161081e90612e3d565b61095483838361179e565b600b546001600160a01b03610100909104163314610a5e5760405162461bcd60e51b815260040161081e90612e8e565b610a786001600160a01b03821663501ad8ff60e11b611618565b610aea5760405162461bcd60e51b815260206004820152603b60248201527f4c656d6d61546f6b656e3a206164647265737320646f6573206e6f7420696d7060448201527f6c656d656e74207468652050726963657220696e746572666163650000000000606482015260840161081e565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b17836110e6565b8210610b795760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161081e565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600b546001600160a01b03610100909104163314610bd25760405162461bcd60e51b815260040161081e90612e8e565b610bec6001600160a01b038216639791c09760e01b611618565b610c6c5760405162461bcd60e51b8152602060048201526044602482018190527f4c656d6d61546f6b656e3a206164647265737320646f6573206e6f7420696d70908201527f6c656d656e742074686520537472696e6756616c696461746f7220696e7465726064820152636661636560e01b608482015260a40161081e565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b03610100909104163314610cbe5760405162461bcd60e51b815260040161081e90612e8e565b610cc6611949565b565b61095483838360405180602001604052806000815250611324565b600d60205260009081526040902080548190610cfe90612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2a90612dd9565b8015610d775780601f10610d4c57610100808354040283529160200191610d77565b820191906000526020600020905b815481529060010190602001808311610d5a57829003601f168201915b505050505090806001018054610d8c90612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610db890612dd9565b8015610e055780601f10610dda57610100808354040283529160200191610e05565b820191906000526020600020905b815481529060010190602001808311610de857829003601f168201915b505050505090806002018054610e1a90612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4690612dd9565b8015610e935780601f10610e6857610100808354040283529160200191610e93565b820191906000526020600020905b815481529060010190602001808311610e7657829003601f168201915b5050505050905083565b600f54604051639791c09760e01b81526000916001600160a01b031690639791c09790610ed09086908690600401612ec3565b60206040518083038186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190612ef2565b9392505050565b6000610f3260085490565b8210610f955760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161081e565b60088281548110610fa857610fa8612f0f565b90600052602060002001549050919050565b600b5460ff1615610fdd5760405162461bcd60e51b815260040161081e90612f25565b6000610fe933856116c7565b9050806110085760405162461bcd60e51b815260040161081e90612f4f565b6000848152600d602052604090206110249060020184846127b4565b5083336001600160a01b03167fc7bf025f4d38f11ad3e169ba0151f04b9ecab0d71335c1137fa5a33ec1b4d6408585604051611061929190612ec3565b60405180910390a350505050565b6000818152600260205260408120546001600160a01b0316806107115760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161081e565b60006001600160a01b0382166111515760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161081e565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b0361010090910416331461119d5760405162461bcd60e51b815260040161081e90612e8e565b610cc660006119dc565b600b546000906001600160a01b036101009091041633146111da5760405162461bcd60e51b815260040161081e90612e8e565b6111e48787610e9d565b6112005760405162461bcd60e51b815260040161081e90612f9b565b61120a87876109db565b905061121c8882898989898989611a36565b979650505050505050565b600b546001600160a01b036101009091041633146112575760405162461bcd60e51b815260040161081e90612e8e565b610cc6611c2c565b60606001805461072690612dd9565b600b5460ff16156112915760405162461bcd60e51b815260040161081e90612f25565b600061129d33856116c7565b9050806112bc5760405162461bcd60e51b815260040161081e90612f4f565b6000848152600d602052604090206112d89060010184846127b4565b5083336001600160a01b03167feb51d73a25def7e9d1760d74d89aeee490fb848ba611ca0c233e545db0ffbc248585604051611061929190612ec3565b611320338383611c84565b5050565b61132e33836116c7565b61134a5760405162461bcd60e51b815260040161081e90612e3d565b61135684848484611d53565b50505050565b606061071182611d86565b600b546001600160a01b036101009091041633146113975760405162461bcd60e51b815260040161081e90612e8e565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60006113c3610959565b3410156114125760405162461bcd60e51b815260206004820152601f60248201527f4c656d6d61546f6b656e3a206d696e74696e672066656520746f6f206c6f7700604482015260640161081e565b61141c8787610e9d565b6114385760405162461bcd60e51b815260040161081e90612f9b565b61144287876109db565b90506114543382898989898989611a36565b9695505050505050565b600c546000906001600160a01b03161561150f57600c5460405163c455279160e01b81526001600160a01b03858116600483015291821691841690829063c45527919060240160206040518083038186803b1580156114bc57600080fd5b505afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190613002565b6001600160a01b0316141561150d576001915050610711565b505b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16610f20565b6000341161154a57600080fd5b60405133907f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce790600090a2565b600b546001600160a01b036101009091041633146115a75760405162461bcd60e51b815260040161081e90612e8e565b6001600160a01b03811661160c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161081e565b611615816119dc565b50565b600061162383611f2a565b8015610f205750610f208383611f5d565b60006001600160e01b0319821663780e9d6360e01b148061071157506107118261203c565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061168e8261106f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166117405760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161081e565b600061174b8361106f565b9050806001600160a01b0316846001600160a01b031614806117865750836001600160a01b031661177b846107a9565b6001600160a01b0316145b806117965750611796818561145e565b949350505050565b826001600160a01b03166117b18261106f565b6001600160a01b0316146118195760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161081e565b6001600160a01b03821661187b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161081e565b61188683838361208c565b611891600082611659565b6001600160a01b03831660009081526003602052604081208054600192906118ba908490613035565b90915550506001600160a01b03821660009081526003602052604081208054600192906118e890849061304c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b5460ff166119925760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161081e565b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a4088886120ba565b604051806060016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092019190915250505090825250604080516020601f8601819004810282018101909252848152918101919085908590819084018382808284376000920182905250939094525050898152600d6020908152604090912083518051919350611b1d928492910190612838565b506020828101518051611b369260018501920190612838565b5060408201518051611b52916002840191602090910190612838565b5090505086886001600160a01b03167f5abec3975d9cd754668d68227983987ab56bb8290c5537243775f0cd3108406d8888604051611b92929190612ec3565b60405180910390a386886001600160a01b03167feb51d73a25def7e9d1760d74d89aeee490fb848ba611ca0c233e545db0ffbc248686604051611bd6929190612ec3565b60405180910390a386886001600160a01b03167fc7bf025f4d38f11ad3e169ba0151f04b9ecab0d71335c1137fa5a33ec1b4d6408484604051611c1a929190612ec3565b60405180910390a35050505050505050565b600b5460ff1615611c4f5760405162461bcd60e51b815260040161081e90612f25565b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119bf3390565b816001600160a01b0316836001600160a01b03161415611ce65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161081e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611d5e84848461179e565b611d6a848484846120d4565b6113565760405162461bcd60e51b815260040161081e90613064565b6000818152600260205260409020546060906001600160a01b0316611e075760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161081e565b6000828152600a602052604081208054611e2090612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4c90612dd9565b8015611e995780601f10611e6e57610100808354040283529160200191611e99565b820191906000526020600020905b815481529060010190602001808311611e7c57829003601f168201915b505050505090506000611edc60408051808201909152601d81527f68747470733a2f2f6c657869636f6e6f6d792e6f72672f746f6b656e2f000000602082015290565b9050805160001415611eef575092915050565b815115611f21578082604051602001611f099291906130b6565b60405160208183030381529060405292505050919050565b611796846121e1565b6000611f3d826301ffc9a760e01b611f5d565b80156107115750611f56826001600160e01b0319611f5d565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090611fc49086906130e5565b6000604051808303818686fa925050503d8060008114612000576040519150601f19603f3d011682016040523d82523d6000602084013e612005565b606091505b50915091506020815110156120205760009350505050610711565b8180156114545750808060200190518101906114549190612ef2565b60006001600160e01b031982166380ac58cd60e01b148061206d57506001600160e01b03198216635b5e139f60e01b145b8061071157506301ffc9a760e01b6001600160e01b0319831614610711565b600b5460ff16156120af5760405162461bcd60e51b815260040161081e90612f25565b6109548383836122ed565b6113208282604051806020016040528060008152506123a5565b60006001600160a01b0384163b156121d657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612118903390899088908890600401613101565b602060405180830381600087803b15801561213257600080fd5b505af1925050508015612162575060408051601f3d908101601f1916820190925261215f91810190613134565b60015b6121bc573d808015612190576040519150601f19603f3d011682016040523d82523d6000602084013e612195565b606091505b5080516121b45760405162461bcd60e51b815260040161081e90613064565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611796565b506001949350505050565b6000818152600260205260409020546060906001600160a01b03166122605760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161081e565b600061229c60408051808201909152601d81527f68747470733a2f2f6c657869636f6e6f6d792e6f72672f746f6b656e2f000000602082015290565b905060008151116122bc5760405180602001604052806000815250610f20565b806122c6846123d8565b6040516020016122d79291906130b6565b6040516020818303038152906040529392505050565b6001600160a01b0383166123485761234381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61236b565b816001600160a01b0316836001600160a01b03161461236b5761236b83826124d6565b6001600160a01b0382166123825761095481612573565b826001600160a01b0316826001600160a01b031614610954576109548282612622565b6123af8383612666565b6123bc60008484846120d4565b6109545760405162461bcd60e51b815260040161081e90613064565b6060816123fc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612426578061241081613151565b915061241f9050600a83613182565b9150612400565b60008167ffffffffffffffff81111561244157612441612c1b565b6040519080825280601f01601f19166020018201604052801561246b576020820181803683370190505b5090505b841561179657612480600183613035565b915061248d600a86613196565b61249890603061304c565b60f81b8183815181106124ad576124ad612f0f565b60200101906001600160f81b031916908160001a9053506124cf600a86613182565b945061246f565b600060016124e3846110e6565b6124ed9190613035565b600083815260076020526040902054909150808214612540576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061258590600190613035565b600083815260096020526040812054600880549394509092849081106125ad576125ad612f0f565b9060005260206000200154905080600883815481106125ce576125ce612f0f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612606576126066131aa565b6001900381819060005260206000200160009055905550505050565b600061262d836110e6565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166126bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161081e565b6000818152600260205260409020546001600160a01b0316156127215760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161081e565b61272d6000838361208c565b6001600160a01b038216600090815260036020526040812080546001929061275690849061304c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546127c090612dd9565b90600052602060002090601f0160209004810192826127e25760008555612828565b82601f106127fb5782800160ff19823516178555612828565b82800160010185558215612828579182015b8281111561282857823582559160200191906001019061280d565b506128349291506128ac565b5090565b82805461284490612dd9565b90600052602060002090601f0160209004810192826128665760008555612828565b82601f1061287f57805160ff1916838001178555612828565b82800160010185558215612828579182015b82811115612828578251825591602001919060010190612891565b5b8082111561283457600081556001016128ad565b6001600160e01b03198116811461161557600080fd5b6000602082840312156128e957600080fd5b8135610f20816128c1565b60005b8381101561290f5781810151838201526020016128f7565b838111156113565750506000910152565b600081518084526129388160208601602086016128f4565b601f01601f19169290920160200192915050565b602081526000610f206020830184612920565b60006020828403121561297157600080fd5b5035919050565b6001600160a01b038116811461161557600080fd5b600080604083850312156129a057600080fd5b82356129ab81612978565b946020939093013593505050565b60008083601f8401126129cb57600080fd5b50813567ffffffffffffffff8111156129e357600080fd5b6020830191508360208285010111156129fb57600080fd5b9250929050565b60008060208385031215612a1557600080fd5b823567ffffffffffffffff811115612a2c57600080fd5b612a38858286016129b9565b90969095509350505050565b600080600060608486031215612a5957600080fd5b8335612a6481612978565b92506020840135612a7481612978565b929592945050506040919091013590565b600060208284031215612a9757600080fd5b8135610f2081612978565b606081526000612ab56060830186612920565b8281036020840152612ac78186612920565b905082810360408401526114548185612920565b600080600060408486031215612af057600080fd5b83359250602084013567ffffffffffffffff811115612b0e57600080fd5b612b1a868287016129b9565b9497909650939450505050565b60008060008060008060006080888a031215612b4257600080fd5b8735612b4d81612978565b9650602088013567ffffffffffffffff80821115612b6a57600080fd5b612b768b838c016129b9565b909850965060408a0135915080821115612b8f57600080fd5b612b9b8b838c016129b9565b909650945060608a0135915080821115612bb457600080fd5b50612bc18a828b016129b9565b989b979a50959850939692959293505050565b801515811461161557600080fd5b60008060408385031215612bf557600080fd5b8235612c0081612978565b91506020830135612c1081612bd4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612c4757600080fd5b8435612c5281612978565b93506020850135612c6281612978565b925060408501359150606085013567ffffffffffffffff80821115612c8657600080fd5b818701915087601f830112612c9a57600080fd5b813581811115612cac57612cac612c1b565b604051601f8201601f19908116603f01168101908382118183101715612cd457612cd4612c1b565b816040528281528a6020848701011115612ced57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060008060008060608789031215612d2a57600080fd5b863567ffffffffffffffff80821115612d4257600080fd5b612d4e8a838b016129b9565b90985096506020890135915080821115612d6757600080fd5b612d738a838b016129b9565b90965094506040890135915080821115612d8c57600080fd5b50612d9989828a016129b9565b979a9699509497509295939492505050565b60008060408385031215612dbe57600080fd5b8235612dc981612978565b91506020830135612c1081612978565b600181811c90821680612ded57607f821691505b60208210811415612e0e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612e2657600080fd5b5051919050565b8183823760009101908152919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215612f0457600080fd5b8151610f2081612bd4565b634e487b7160e01b600052603260045260246000fd5b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602c908201527f4c656d6d61546f6b656e3a2063616c6c6572206973206e6f74206f776e65722060408201526b1b9bdc88185c1c1c9bdd995960a21b606082015260800190565b60208082526041908201527f4c656d6d61546f6b656e3a206c656d6d6120697320696e76616c69643a20646f60408201527f657320697420636f6e7461696e20696e76616c696420636861726163746572736060820152603f60f81b608082015260a00190565b60006020828403121561301457600080fd5b8151610f2081612978565b634e487b7160e01b600052601160045260246000fd5b6000828210156130475761304761301f565b500390565b6000821982111561305f5761305f61301f565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516130c88184602088016128f4565b8351908301906130dc8183602088016128f4565b01949350505050565b600082516130f78184602087016128f4565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061145490830184612920565b60006020828403121561314657600080fd5b8151610f20816128c1565b60006000198214156131655761316561301f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826131915761319161316c565b500490565b6000826131a5576131a561316c565b500690565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209dcd36653f7f6d25bb49bad852f2c150c57f55bccdb9397dab44835680c94f7f64736f6c634300080900334c656d6d61546f6b656e3a206164647265737320646f6573206e6f7420696d704f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c80636352211e1161012e578063a22cb465116100ab578063d26ea6c01161006f578063d26ea6c01461068b578063d645ddf6146106ab578063e985e9c5146106be578063ed88c68e146106de578063f2fde38b146106e657600080fd5b8063a22cb465146105eb578063a6138ed91461060b578063b88d4fde1461062b578063c87b56dd1461064b578063cd7c03261461066b57600080fd5b80638da5cb5b116100f25780638da5cb5b14610544578063906979911461056757806395d89b411461059b57806395df7e56146105b05780639efb8eb1146105cb57600080fd5b80636352211e146104ba57806370a08231146104da578063715018a6146104fa5780637e4fbb831461050f5780638456cb591461052f57600080fd5b80632f745c59116101bc5780634891a178116101805780634891a178146104225780634f6ccce71461044257806352d41014146104625780635c975abb146104825780635ea297681461049a57600080fd5b80632f745c591461037e57806336d469d81461039e5780633f4ba83a146103be57806342842e0e146103d357806347202e5c146103f357600080fd5b806313966db51161020357806313966db5146102e657806318160ddd146103095780631e7663bc1461031e57806323b872dd1461033e578063293903701461035e57600080fd5b806301ffc9a71461023557806306fdde031461026a578063081812fc1461028c578063095ea7b3146102c4575b600080fd5b34801561024157600080fd5b506102556102503660046128d7565b610706565b60405190151581526020015b60405180910390f35b34801561027657600080fd5b5061027f610717565b604051610261919061294c565b34801561029857600080fd5b506102ac6102a736600461295f565b6107a9565b6040516001600160a01b039091168152602001610261565b3480156102d057600080fd5b506102e46102df36600461298d565b610843565b005b3480156102f257600080fd5b506102fb610959565b604051908152602001610261565b34801561031557600080fd5b506008546102fb565b34801561032a57600080fd5b506102fb610339366004612a02565b6109db565b34801561034a57600080fd5b506102e4610359366004612a44565b6109fd565b34801561036a57600080fd5b506102e4610379366004612a85565b610a2e565b34801561038a57600080fd5b506102fb61039936600461298d565b610b0c565b3480156103aa57600080fd5b506102e46103b9366004612a85565b610ba2565b3480156103ca57600080fd5b506102e4610c8e565b3480156103df57600080fd5b506102e46103ee366004612a44565b610cc8565b3480156103ff57600080fd5b5061041361040e36600461295f565b610ce3565b60405161026193929190612aa2565b34801561042e57600080fd5b5061025561043d366004612a02565b610e9d565b34801561044e57600080fd5b506102fb61045d36600461295f565b610f27565b34801561046e57600080fd5b50600f546102ac906001600160a01b031681565b34801561048e57600080fd5b50600b5460ff16610255565b3480156104a657600080fd5b506102e46104b5366004612adb565b610fba565b3480156104c657600080fd5b506102ac6104d536600461295f565b61106f565b3480156104e657600080fd5b506102fb6104f5366004612a85565b6110e6565b34801561050657600080fd5b506102e461116d565b34801561051b57600080fd5b506102fb61052a366004612b27565b6111a7565b34801561053b57600080fd5b506102e4611227565b34801561055057600080fd5b50600b5461010090046001600160a01b03166102ac565b34801561057357600080fd5b50610582639791c09760e01b81565b6040516001600160e01b03199091168152602001610261565b3480156105a757600080fd5b5061027f61125f565b3480156105bc57600080fd5b5061058263501ad8ff60e11b81565b3480156105d757600080fd5b506102e46105e6366004612adb565b61126e565b3480156105f757600080fd5b506102e4610606366004612be2565b611315565b34801561061757600080fd5b50600e546102ac906001600160a01b031681565b34801561063757600080fd5b506102e4610646366004612c31565b611324565b34801561065757600080fd5b5061027f61066636600461295f565b61135c565b34801561067757600080fd5b50600c546102ac906001600160a01b031681565b34801561069757600080fd5b506102e46106a6366004612a85565b611367565b6102fb6106b9366004612d11565b6113b9565b3480156106ca57600080fd5b506102556106d9366004612dab565b61145e565b6102e461153d565b3480156106f257600080fd5b506102e4610701366004612a85565b611577565b600061071182611634565b92915050565b60606000805461072690612dd9565b80601f016020809104026020016040519081016040528092919081815260200182805461075290612dd9565b801561079f5780601f106107745761010080835404028352916020019161079f565b820191906000526020600020905b81548152906001019060200180831161078257829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166108275760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061084e8261106f565b9050806001600160a01b0316836001600160a01b031614156108bc5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161081e565b336001600160a01b03821614806108d857506108d8813361145e565b61094a5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606482015260840161081e565b6109548383611659565b505050565b600e546040805163501ad8ff60e11b815290516000926001600160a01b03169163a035b1fe916004808301926020929190829003018186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d69190612e14565b905090565b600082826040516109ed929190612e2d565b6040519081900390209392505050565b610a0733826116c7565b610a235760405162461bcd60e51b815260040161081e90612e3d565b61095483838361179e565b600b546001600160a01b03610100909104163314610a5e5760405162461bcd60e51b815260040161081e90612e8e565b610a786001600160a01b03821663501ad8ff60e11b611618565b610aea5760405162461bcd60e51b815260206004820152603b60248201527f4c656d6d61546f6b656e3a206164647265737320646f6573206e6f7420696d7060448201527f6c656d656e74207468652050726963657220696e746572666163650000000000606482015260840161081e565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b17836110e6565b8210610b795760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161081e565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600b546001600160a01b03610100909104163314610bd25760405162461bcd60e51b815260040161081e90612e8e565b610bec6001600160a01b038216639791c09760e01b611618565b610c6c5760405162461bcd60e51b8152602060048201526044602482018190527f4c656d6d61546f6b656e3a206164647265737320646f6573206e6f7420696d70908201527f6c656d656e742074686520537472696e6756616c696461746f7220696e7465726064820152636661636560e01b608482015260a40161081e565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546001600160a01b03610100909104163314610cbe5760405162461bcd60e51b815260040161081e90612e8e565b610cc6611949565b565b61095483838360405180602001604052806000815250611324565b600d60205260009081526040902080548190610cfe90612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2a90612dd9565b8015610d775780601f10610d4c57610100808354040283529160200191610d77565b820191906000526020600020905b815481529060010190602001808311610d5a57829003601f168201915b505050505090806001018054610d8c90612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610db890612dd9565b8015610e055780601f10610dda57610100808354040283529160200191610e05565b820191906000526020600020905b815481529060010190602001808311610de857829003601f168201915b505050505090806002018054610e1a90612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4690612dd9565b8015610e935780601f10610e6857610100808354040283529160200191610e93565b820191906000526020600020905b815481529060010190602001808311610e7657829003601f168201915b5050505050905083565b600f54604051639791c09760e01b81526000916001600160a01b031690639791c09790610ed09086908690600401612ec3565b60206040518083038186803b158015610ee857600080fd5b505afa158015610efc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f209190612ef2565b9392505050565b6000610f3260085490565b8210610f955760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161081e565b60088281548110610fa857610fa8612f0f565b90600052602060002001549050919050565b600b5460ff1615610fdd5760405162461bcd60e51b815260040161081e90612f25565b6000610fe933856116c7565b9050806110085760405162461bcd60e51b815260040161081e90612f4f565b6000848152600d602052604090206110249060020184846127b4565b5083336001600160a01b03167fc7bf025f4d38f11ad3e169ba0151f04b9ecab0d71335c1137fa5a33ec1b4d6408585604051611061929190612ec3565b60405180910390a350505050565b6000818152600260205260408120546001600160a01b0316806107115760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161081e565b60006001600160a01b0382166111515760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161081e565b506001600160a01b031660009081526003602052604090205490565b600b546001600160a01b0361010090910416331461119d5760405162461bcd60e51b815260040161081e90612e8e565b610cc660006119dc565b600b546000906001600160a01b036101009091041633146111da5760405162461bcd60e51b815260040161081e90612e8e565b6111e48787610e9d565b6112005760405162461bcd60e51b815260040161081e90612f9b565b61120a87876109db565b905061121c8882898989898989611a36565b979650505050505050565b600b546001600160a01b036101009091041633146112575760405162461bcd60e51b815260040161081e90612e8e565b610cc6611c2c565b60606001805461072690612dd9565b600b5460ff16156112915760405162461bcd60e51b815260040161081e90612f25565b600061129d33856116c7565b9050806112bc5760405162461bcd60e51b815260040161081e90612f4f565b6000848152600d602052604090206112d89060010184846127b4565b5083336001600160a01b03167feb51d73a25def7e9d1760d74d89aeee490fb848ba611ca0c233e545db0ffbc248585604051611061929190612ec3565b611320338383611c84565b5050565b61132e33836116c7565b61134a5760405162461bcd60e51b815260040161081e90612e3d565b61135684848484611d53565b50505050565b606061071182611d86565b600b546001600160a01b036101009091041633146113975760405162461bcd60e51b815260040161081e90612e8e565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60006113c3610959565b3410156114125760405162461bcd60e51b815260206004820152601f60248201527f4c656d6d61546f6b656e3a206d696e74696e672066656520746f6f206c6f7700604482015260640161081e565b61141c8787610e9d565b6114385760405162461bcd60e51b815260040161081e90612f9b565b61144287876109db565b90506114543382898989898989611a36565b9695505050505050565b600c546000906001600160a01b03161561150f57600c5460405163c455279160e01b81526001600160a01b03858116600483015291821691841690829063c45527919060240160206040518083038186803b1580156114bc57600080fd5b505afa1580156114d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f49190613002565b6001600160a01b0316141561150d576001915050610711565b505b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff16610f20565b6000341161154a57600080fd5b60405133907f187f451f92c6a4236353b5331d5fb67bdbfcc66b54367037fba41d6bcef08ce790600090a2565b600b546001600160a01b036101009091041633146115a75760405162461bcd60e51b815260040161081e90612e8e565b6001600160a01b03811661160c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161081e565b611615816119dc565b50565b600061162383611f2a565b8015610f205750610f208383611f5d565b60006001600160e01b0319821663780e9d6360e01b148061071157506107118261203c565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061168e8261106f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b03166117405760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161081e565b600061174b8361106f565b9050806001600160a01b0316846001600160a01b031614806117865750836001600160a01b031661177b846107a9565b6001600160a01b0316145b806117965750611796818561145e565b949350505050565b826001600160a01b03166117b18261106f565b6001600160a01b0316146118195760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161081e565b6001600160a01b03821661187b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161081e565b61188683838361208c565b611891600082611659565b6001600160a01b03831660009081526003602052604081208054600192906118ba908490613035565b90915550506001600160a01b03821660009081526003602052604081208054600192906118e890849061304c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600b5460ff166119925760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161081e565b600b805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600b80546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611a4088886120ba565b604051806060016040528087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f880181900481028201810190925286815291810191908790879081908401838280828437600092019190915250505090825250604080516020601f8601819004810282018101909252848152918101919085908590819084018382808284376000920182905250939094525050898152600d6020908152604090912083518051919350611b1d928492910190612838565b506020828101518051611b369260018501920190612838565b5060408201518051611b52916002840191602090910190612838565b5090505086886001600160a01b03167f5abec3975d9cd754668d68227983987ab56bb8290c5537243775f0cd3108406d8888604051611b92929190612ec3565b60405180910390a386886001600160a01b03167feb51d73a25def7e9d1760d74d89aeee490fb848ba611ca0c233e545db0ffbc248686604051611bd6929190612ec3565b60405180910390a386886001600160a01b03167fc7bf025f4d38f11ad3e169ba0151f04b9ecab0d71335c1137fa5a33ec1b4d6408484604051611c1a929190612ec3565b60405180910390a35050505050505050565b600b5460ff1615611c4f5760405162461bcd60e51b815260040161081e90612f25565b600b805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586119bf3390565b816001600160a01b0316836001600160a01b03161415611ce65760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161081e565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611d5e84848461179e565b611d6a848484846120d4565b6113565760405162461bcd60e51b815260040161081e90613064565b6000818152600260205260409020546060906001600160a01b0316611e075760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b606482015260840161081e565b6000828152600a602052604081208054611e2090612dd9565b80601f0160208091040260200160405190810160405280929190818152602001828054611e4c90612dd9565b8015611e995780601f10611e6e57610100808354040283529160200191611e99565b820191906000526020600020905b815481529060010190602001808311611e7c57829003601f168201915b505050505090506000611edc60408051808201909152601d81527f68747470733a2f2f6c657869636f6e6f6d792e6f72672f746f6b656e2f000000602082015290565b9050805160001415611eef575092915050565b815115611f21578082604051602001611f099291906130b6565b60405160208183030381529060405292505050919050565b611796846121e1565b6000611f3d826301ffc9a760e01b611f5d565b80156107115750611f56826001600160e01b0319611f5d565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090611fc49086906130e5565b6000604051808303818686fa925050503d8060008114612000576040519150601f19603f3d011682016040523d82523d6000602084013e612005565b606091505b50915091506020815110156120205760009350505050610711565b8180156114545750808060200190518101906114549190612ef2565b60006001600160e01b031982166380ac58cd60e01b148061206d57506001600160e01b03198216635b5e139f60e01b145b8061071157506301ffc9a760e01b6001600160e01b0319831614610711565b600b5460ff16156120af5760405162461bcd60e51b815260040161081e90612f25565b6109548383836122ed565b6113208282604051806020016040528060008152506123a5565b60006001600160a01b0384163b156121d657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612118903390899088908890600401613101565b602060405180830381600087803b15801561213257600080fd5b505af1925050508015612162575060408051601f3d908101601f1916820190925261215f91810190613134565b60015b6121bc573d808015612190576040519150601f19603f3d011682016040523d82523d6000602084013e612195565b606091505b5080516121b45760405162461bcd60e51b815260040161081e90613064565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611796565b506001949350505050565b6000818152600260205260409020546060906001600160a01b03166122605760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161081e565b600061229c60408051808201909152601d81527f68747470733a2f2f6c657869636f6e6f6d792e6f72672f746f6b656e2f000000602082015290565b905060008151116122bc5760405180602001604052806000815250610f20565b806122c6846123d8565b6040516020016122d79291906130b6565b6040516020818303038152906040529392505050565b6001600160a01b0383166123485761234381600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61236b565b816001600160a01b0316836001600160a01b03161461236b5761236b83826124d6565b6001600160a01b0382166123825761095481612573565b826001600160a01b0316826001600160a01b031614610954576109548282612622565b6123af8383612666565b6123bc60008484846120d4565b6109545760405162461bcd60e51b815260040161081e90613064565b6060816123fc5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612426578061241081613151565b915061241f9050600a83613182565b9150612400565b60008167ffffffffffffffff81111561244157612441612c1b565b6040519080825280601f01601f19166020018201604052801561246b576020820181803683370190505b5090505b841561179657612480600183613035565b915061248d600a86613196565b61249890603061304c565b60f81b8183815181106124ad576124ad612f0f565b60200101906001600160f81b031916908160001a9053506124cf600a86613182565b945061246f565b600060016124e3846110e6565b6124ed9190613035565b600083815260076020526040902054909150808214612540576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061258590600190613035565b600083815260096020526040812054600880549394509092849081106125ad576125ad612f0f565b9060005260206000200154905080600883815481106125ce576125ce612f0f565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612606576126066131aa565b6001900381819060005260206000200160009055905550505050565b600061262d836110e6565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166126bc5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161081e565b6000818152600260205260409020546001600160a01b0316156127215760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161081e565b61272d6000838361208c565b6001600160a01b038216600090815260036020526040812080546001929061275690849061304c565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546127c090612dd9565b90600052602060002090601f0160209004810192826127e25760008555612828565b82601f106127fb5782800160ff19823516178555612828565b82800160010185558215612828579182015b8281111561282857823582559160200191906001019061280d565b506128349291506128ac565b5090565b82805461284490612dd9565b90600052602060002090601f0160209004810192826128665760008555612828565b82601f1061287f57805160ff1916838001178555612828565b82800160010185558215612828579182015b82811115612828578251825591602001919060010190612891565b5b8082111561283457600081556001016128ad565b6001600160e01b03198116811461161557600080fd5b6000602082840312156128e957600080fd5b8135610f20816128c1565b60005b8381101561290f5781810151838201526020016128f7565b838111156113565750506000910152565b600081518084526129388160208601602086016128f4565b601f01601f19169290920160200192915050565b602081526000610f206020830184612920565b60006020828403121561297157600080fd5b5035919050565b6001600160a01b038116811461161557600080fd5b600080604083850312156129a057600080fd5b82356129ab81612978565b946020939093013593505050565b60008083601f8401126129cb57600080fd5b50813567ffffffffffffffff8111156129e357600080fd5b6020830191508360208285010111156129fb57600080fd5b9250929050565b60008060208385031215612a1557600080fd5b823567ffffffffffffffff811115612a2c57600080fd5b612a38858286016129b9565b90969095509350505050565b600080600060608486031215612a5957600080fd5b8335612a6481612978565b92506020840135612a7481612978565b929592945050506040919091013590565b600060208284031215612a9757600080fd5b8135610f2081612978565b606081526000612ab56060830186612920565b8281036020840152612ac78186612920565b905082810360408401526114548185612920565b600080600060408486031215612af057600080fd5b83359250602084013567ffffffffffffffff811115612b0e57600080fd5b612b1a868287016129b9565b9497909650939450505050565b60008060008060008060006080888a031215612b4257600080fd5b8735612b4d81612978565b9650602088013567ffffffffffffffff80821115612b6a57600080fd5b612b768b838c016129b9565b909850965060408a0135915080821115612b8f57600080fd5b612b9b8b838c016129b9565b909650945060608a0135915080821115612bb457600080fd5b50612bc18a828b016129b9565b989b979a50959850939692959293505050565b801515811461161557600080fd5b60008060408385031215612bf557600080fd5b8235612c0081612978565b91506020830135612c1081612bd4565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215612c4757600080fd5b8435612c5281612978565b93506020850135612c6281612978565b925060408501359150606085013567ffffffffffffffff80821115612c8657600080fd5b818701915087601f830112612c9a57600080fd5b813581811115612cac57612cac612c1b565b604051601f8201601f19908116603f01168101908382118183101715612cd457612cd4612c1b565b816040528281528a6020848701011115612ced57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060008060008060608789031215612d2a57600080fd5b863567ffffffffffffffff80821115612d4257600080fd5b612d4e8a838b016129b9565b90985096506020890135915080821115612d6757600080fd5b612d738a838b016129b9565b90965094506040890135915080821115612d8c57600080fd5b50612d9989828a016129b9565b979a9699509497509295939492505050565b60008060408385031215612dbe57600080fd5b8235612dc981612978565b91506020830135612c1081612978565b600181811c90821680612ded57607f821691505b60208210811415612e0e57634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215612e2657600080fd5b5051919050565b8183823760009101908152919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215612f0457600080fd5b8151610f2081612bd4565b634e487b7160e01b600052603260045260246000fd5b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602c908201527f4c656d6d61546f6b656e3a2063616c6c6572206973206e6f74206f776e65722060408201526b1b9bdc88185c1c1c9bdd995960a21b606082015260800190565b60208082526041908201527f4c656d6d61546f6b656e3a206c656d6d6120697320696e76616c69643a20646f60408201527f657320697420636f6e7461696e20696e76616c696420636861726163746572736060820152603f60f81b608082015260a00190565b60006020828403121561301457600080fd5b8151610f2081612978565b634e487b7160e01b600052601160045260246000fd5b6000828210156130475761304761301f565b500390565b6000821982111561305f5761305f61301f565b500190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600083516130c88184602088016128f4565b8351908301906130dc8183602088016128f4565b01949350505050565b600082516130f78184602087016128f4565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061145490830184612920565b60006020828403121561314657600080fd5b8151610f20816128c1565b60006000198214156131655761316561301f565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826131915761319161316c565b500490565b6000826131a5576131a561316c565b500690565b634e487b7160e01b600052603160045260246000fdfea26469706673582212209dcd36653f7f6d25bb49bad852f2c150c57f55bccdb9397dab44835680c94f7f64736f6c63430008090033",
  "devdoc": {
    "events": {
      "Donation(address)": {
        "details": "Donation event for donors because they deserve it"
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "definition(uint256,string)": {
        "details": "named 'definition' because 'define' is a reserved keyword"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the main Lexiconomy smart contract instance."
      },
      "donate()": {
        "notice": "Thank you :)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 222,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 228,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 232,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 236,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 242,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1176,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1180,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1183,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1187,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1512,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 122,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_paused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "_owner",
        "offset": 1,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2645,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2741,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "lemmas",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(Lemma)2736_storage)"
      },
      {
        "astId": 2750,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "pricer",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(Pricer)3465"
      },
      {
        "astId": 2786,
        "contract": "contracts/Lexiconomy.sol:Lexiconomy",
        "label": "lemmaValidator",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(StringValidator)3478"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Pricer)3465": {
        "encoding": "inplace",
        "label": "contract Pricer",
        "numberOfBytes": "20"
      },
      "t_contract(StringValidator)3478": {
        "encoding": "inplace",
        "label": "contract StringValidator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Lemma)2736_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LemmaToken.Lemma)",
        "numberOfBytes": "32",
        "value": "t_struct(Lemma)2736_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Lemma)2736_storage": {
        "encoding": "inplace",
        "label": "struct LemmaToken.Lemma",
        "members": [
          {
            "astId": 2731,
            "contract": "contracts/Lexiconomy.sol:Lexiconomy",
            "label": "lemma",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2733,
            "contract": "contracts/Lexiconomy.sol:Lexiconomy",
            "label": "definition",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2735,
            "contract": "contracts/Lexiconomy.sol:Lexiconomy",
            "label": "example",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}