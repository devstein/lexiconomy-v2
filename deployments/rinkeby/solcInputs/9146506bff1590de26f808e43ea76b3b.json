{
  "language": "Solidity",
  "sources": {
    "contracts/FixedPricer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Pricer.sol\";\n\ncontract FixedPricer is Pricer, Ownable {\n  bytes4 public constant interfaceId = type(Pricer).interfaceId;\n  uint256 private currentPrice;\n\n  constructor(uint256 _price) {\n    currentPrice = _price;\n  }\n\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == interfaceId || _interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @dev Keep price a function for flexibility in the future to\n  /// compute the price dynamically.\n  function price() external view returns (uint256) {\n    return currentPrice;\n  }\n\n  function setPrice(uint256 _price) public onlyOwner {\n    currentPrice = _price;\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/Pricer.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface Pricer is IERC165 {\n  function price() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/LemmaToken.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\n\nimport \"./Pricer.sol\";\nimport \"./StringValidator.sol\";\nimport \"./OpenSea.sol\";\n\ncontract LemmaToken is\n  ERC721,\n  ERC721Enumerable,\n  ERC721URIStorage,\n  Pausable,\n  Ownable\n{\n  using ERC165Checker for address;\n\n  // BEGIN: Generated by OpenZepplin\n  constructor() ERC721(\"The Lexiconomy v2\", \"LEX\") {}\n\n  function pause() public onlyOwner {\n    _pause();\n  }\n\n  function unpause() public onlyOwner {\n    _unpause();\n  }\n\n  function _baseURI() internal pure override returns (string memory) {\n    // tokenURI concats the baseURI with the token id\n    // return \"https://lexiconomy.org/token/\";\n    return \"https://lexiconomy-v2.vercel.app/token/\";\n  }\n\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal override(ERC721, ERC721Enumerable) whenNotPaused {\n    super._beforeTokenTransfer(from, to, tokenId);\n  }\n\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\n    super._burn(tokenId);\n  }\n\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    override(ERC721, ERC721URIStorage)\n    returns (string memory)\n  {\n    return super.tokenURI(tokenId);\n  }\n\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    override(ERC721, ERC721Enumerable)\n    returns (bool)\n  {\n    return super.supportsInterface(interfaceId);\n  }\n\n  // END: Generated by OpenZepplin\n\n  // BEGIN: Support OpenSea Trading\n  address public proxyRegistryAddress;\n\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    override\n    returns (bool)\n  {\n    // only execute if proxyRegistryAddress is set\n    if (proxyRegistryAddress != address(0)) {\n      // Whitelist OpenSea proxy contract for easy trading\n      ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n      if (address(proxyRegistry.proxies(owner)) == operator) {\n        return true;\n      }\n    }\n\n    return super.isApprovedForAll(owner, operator);\n  }\n\n  function setProxyRegistryAddress(address _address) public onlyOwner {\n    proxyRegistryAddress = _address;\n  }\n\n  // END: Support OpenSea Trading\n\n  /// @dev The Invent event is fired whenever a new lemma is invented\n  event Invent(address indexed owner, uint256 indexed tokenId, string lemma);\n\n  /// @dev Definition event whenever an owner redefines their lemma\n  event Definition(\n    address indexed owner,\n    uint256 indexed tokenId,\n    string definition\n  );\n\n  /// @dev Example event whenever an owner provides an example for their lemma\n  event Example(address indexed owner, uint256 indexed tokenId, string example);\n\n  struct Lemma {\n    string lemma;\n    string definition;\n    string example;\n    // number is a monotonically increasing value for every lemma\n    uint256 number;\n  }\n\n  mapping(uint256 => Lemma) public lemmas;\n\n  bytes4 public constant pricerInterfaceId = type(Pricer).interfaceId;\n  Pricer public pricer;\n\n  function setPricer(address _address) public onlyOwner {\n    require(\n      _address.supportsInterface(pricerInterfaceId),\n      \"LemmaToken: address does not implement the Pricer interface\"\n    );\n\n    Pricer candidateContract = Pricer(_address);\n\n    // Set the new contract address\n    pricer = candidateContract;\n  }\n\n  bytes4 public constant stringValidatorInterfaceId =\n    type(StringValidator).interfaceId;\n  StringValidator public lemmaValidator;\n\n  function setLemmaValidator(address _address) public onlyOwner {\n    require(\n      _address.supportsInterface(stringValidatorInterfaceId),\n      \"LemmaToken: address does not implement the StringValidator interface\"\n    );\n\n    StringValidator candidateContract = StringValidator(_address);\n\n    // Set the new contract address\n    lemmaValidator = candidateContract;\n  }\n\n  function mintFee() public view returns (uint256) {\n    return pricer.price();\n  }\n\n  function lemmaValid(string calldata _lemma) public view returns (bool) {\n    return lemmaValidator.valid(_lemma);\n  }\n\n  function getTokenId(string calldata _lemma) public pure returns (uint256) {\n    return uint256(keccak256(bytes(_lemma)));\n  }\n\n  function _mint(\n    address to,\n    uint256 tokenId,\n    string calldata _lemma,\n    string calldata _definition,\n    string calldata _example\n  ) internal {\n    // _safeMint verifies the tokenId doesn't exist\n    _safeMint(to, tokenId);\n    lemmas[tokenId] = Lemma(_lemma, _definition, _example, totalSupply());\n\n    // emit Invent to let us easily query all created lemmas\n    emit Invent(to, tokenId, _lemma);\n    emit Definition(to, tokenId, _definition);\n    emit Example(to, tokenId, _example);\n  }\n\n  // airdrop for migrating v1 tokens to v2\n  function airdrop(\n    address to,\n    string calldata _lemma,\n    string calldata _definition,\n    string calldata _example\n  ) external onlyOwner returns (uint256 tokenId) {\n    require(\n      lemmaValid(_lemma),\n      \"LemmaToken: lemma is invalid: does it contain invalid characters?\"\n    );\n    tokenId = getTokenId(_lemma);\n    // _mint verifies the tokenId doesn't exist\n    _mint(to, tokenId, _lemma, _definition, _example);\n\n    return tokenId;\n  }\n\n  function mint(\n    string calldata _lemma,\n    string calldata _definition,\n    string calldata _example\n  ) public payable returns (uint256 tokenId) {\n    require(msg.value >= mintFee(), \"LemmaToken: minting fee too low\");\n    require(\n      lemmaValid(_lemma),\n      \"LemmaToken: lemma is invalid: does it contain invalid characters?\"\n    );\n    tokenId = getTokenId(_lemma);\n    // _mint verifies the tokenId doesn't exist\n    _mint(msg.sender, tokenId, _lemma, _definition, _example);\n\n    return tokenId;\n  }\n\n  /// @dev named 'definition' because 'define' is a reserved keyword\n  function definition(uint256 tokenId, string calldata _text)\n    public\n    whenNotPaused\n  {\n    bool allowed = _isApprovedOrOwner(msg.sender, tokenId);\n    require(allowed, \"LemmaToken: caller is not owner nor approved\");\n\n    lemmas[tokenId].definition = _text;\n    emit Definition(msg.sender, tokenId, _text);\n  }\n\n  function example(uint256 tokenId, string calldata _text)\n    public\n    whenNotPaused\n  {\n    bool allowed = _isApprovedOrOwner(msg.sender, tokenId);\n    require(allowed, \"LemmaToken: caller is not owner nor approved\");\n\n    lemmas[tokenId].example = _text;\n    emit Example(msg.sender, tokenId, _text);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721URIStorage: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface,\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\n        internal\n        view\n        returns (bool[] memory)\n    {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in _interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     * Interface identification is specified in ERC-165.\n     */\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\n        if (result.length < 32) return false;\n        return success && abi.decode(result, (bool));\n    }\n}\n"
    },
    "contracts/StringValidator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface StringValidator is IERC165 {\n  function valid(string memory _str) external view returns (bool);\n}\n"
    },
    "contracts/OpenSea.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Taken from: https://github.com/ProjectOpenSea/opensea-creatures/blob/master/contracts/ERC721Tradable.sol\n// to support easy trading on OpenSea\ncontract OwnableDelegateProxy {\n\n}\n\ncontract ProxyRegistry {\n  mapping(address => OwnableDelegateProxy) public proxies;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/Lexiconomy.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./LemmaToken.sol\";\n\ncontract Lexiconomy is LemmaToken {\n  /// @dev Donation event for donors because they deserve it\n  event Donation(address indexed donor);\n\n  /// @notice Creates the main Lexiconomy smart contract instance.\n  constructor(address _pricer, address _lemmaValidator) {\n    // Starts paused.\n    pause();\n    setPricer(_pricer);\n    setLemmaValidator(_lemmaValidator);\n  }\n\n  /// @notice Thank you :)\n  function donate() external payable {\n    require(msg.value > 0);\n    emit Donation(msg.sender);\n  }\n}\n"
    },
    "contracts/MockStringValidator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./StringValidator.sol\";\n\n// MockStringValidator is for testing\ncontract MockStringValidator is StringValidator, Ownable {\n  bytes4 public constant interfaceId = type(StringValidator).interfaceId;\n\n  string public validString;\n\n  constructor(string memory _valid) {\n    validString = _valid;\n  }\n\n  /// @dev Given a string, determine if all it's underlying UTF-8 unicode characters are valid.\n  function valid(string memory _str) external view returns (bool) {\n    return (keccak256(bytes((_str))) == keccak256(bytes((validString))));\n  }\n\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == interfaceId || _interfaceId == type(IERC165).interfaceId;\n  }\n}\n"
    },
    "contracts/LemmaValidator.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"unicode-eth/contracts/Unicode.sol\";\n\nimport \"./StringValidator.sol\";\n\ncontract LemmaValidator is StringValidator, Ownable {\n  using Unicode for string;\n\n  bytes4 public constant interfaceId = type(StringValidator).interfaceId;\n\n  mapping(uint32 => bool) public illegal;\n  mapping(uint32 => bool) public whitespace;\n\n  constructor() {}\n\n  function supportsInterface(bytes4 _interfaceId)\n    public\n    view\n    virtual\n    override(IERC165)\n    returns (bool)\n  {\n    return\n      _interfaceId == interfaceId || _interfaceId == type(IERC165).interfaceId;\n  }\n\n  /// @dev Given a string, determine if all it's underlying UTF-8 Unicode characters are valid.\n  function valid(string memory _str) external view returns (bool) {\n    string memory char;\n    uint256 len = bytes(_str).length;\n    uint256 cursor;\n    uint32 codePoint;\n\n    // check first character\n    (char, cursor) = _str.decodeChar(cursor);\n    codePoint = char.toCodePoint();\n\n    // do not allow whitespace prefix\n    if (illegal[codePoint] || whitespace[codePoint]) return false;\n\n    bool isWhitespace;\n    // maintain flag for previous character\n    bool prevWhitespace;\n\n    while (cursor < len) {\n      (char, cursor) = _str.decodeChar(cursor);\n      codePoint = char.toCodePoint();\n\n      // if invalid return false\n      if (illegal[codePoint]) return false;\n\n      // only allow one whitespace character between words\n      isWhitespace = whitespace[codePoint];\n      if (isWhitespace && prevWhitespace) return false;\n\n      prevWhitespace = isWhitespace;\n    }\n\n    // check last character\n    // do not allow trailing whitespace\n    // we've already check if it's illegal above\n    if (isWhitespace) return false;\n\n    return true;\n  }\n\n  function setIllegalCharacter(uint32 _codePoint, bool _illegal)\n    external\n    onlyOwner\n  {\n    illegal[_codePoint] = _illegal;\n  }\n\n  function batchSetIllegalCharacters(\n    uint32[] calldata _codePoints,\n    bool _illegal\n  ) external onlyOwner {\n    uint256 len = _codePoints.length;\n    for (uint256 i = 0; i < len; i++) {\n      illegal[_codePoints[i]] = _illegal;\n    }\n  }\n\n  function setWhitespaceCharacter(uint32 _codePoint, bool _whitespace)\n    external\n    onlyOwner\n  {\n    whitespace[_codePoint] = _whitespace;\n  }\n\n  function batchSetWhitespaceCharacters(\n    uint32[] calldata _codePoints,\n    bool _whitespace\n  ) external onlyOwner {\n    uint256 len = _codePoints.length;\n    for (uint256 i = 0; i < len; i++) {\n      whitespace[_codePoints[i]] = _whitespace;\n    }\n  }\n}\n"
    },
    "unicode-eth/contracts/Unicode.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title A library for validating, parsing, and manipulating UTF-8 encoded Unicode strings\n/// @author Devin Stein\n/// @notice For character introspection or more complex transformations, checkout the UnicodeData contract.\n/// @dev All external and public functions use self as their first parameter to allow \"using Unicode for strings;\". If you have ideas for new functions or improvements, please contribute!\nlibrary Unicode {\n  /// @notice Check if `self` contains only single byte ASCII characters (0-127)\n  /// @dev If a string is only ASCII, then it's safe to treat each byte as a character. This returns false for extended ASCII (128-255) because they are use two bytes in UTF-8.\n  /// @param self The input string\n  /// @return True if  the `self` only contains ASCII\n  function isASCII(string calldata self) external pure returns (bool) {\n    bytes calldata _b = bytes(self);\n    uint256 len = _b.length;\n\n    for (uint256 i = 0; i < len; i++) {\n      if ((_b[i] & 0x80) != 0x00) return false;\n    }\n    return true;\n  }\n\n  // ASCII\n  /* 1 byte sequence: U+0000..U+007F */\n  function isOneBytesSequence(bytes1 _b) private pure returns (bool) {\n    return _b[0] <= 0x7F;\n  }\n\n  /* 0b110xxxxx: 2 bytes sequence */\n  /* U+0080..U+07FF */\n  function isTwoBytesSequence(bytes1 _b) private pure returns (bool) {\n    return bytes1(0xC2) <= _b[0] && _b[0] <= bytes1(0xDF);\n  }\n\n  /* 0b1110xxxx: 3 bytes sequence */\n  /* 3 bytes sequence: U+0800..U+FFFF */\n  function isThreeBytesSequence(bytes1 _b) private pure returns (bool) {\n    return bytes1(0xE0) <= _b[0] && _b[0] <= bytes1(0xEF);\n  }\n\n  /* 4 bytes sequence: U+10000..U+10FFFF */\n  /* 0b11110xxx: 4 bytes sequence */\n  function isFourBytesSequence(bytes1 _b) private pure returns (bool) {\n    return bytes1(0xF0) <= _b[0] && _b[0] <= bytes1(0xF4);\n  }\n\n  function isContinuationByte(bytes1 _b) private pure returns (bool) {\n    return ((_b & 0xC0) != 0x80);\n  }\n\n  function twoBytesCodePoint(bytes memory _b) private pure returns (uint32) {\n    return (uint16(uint8(_b[0] & 0x1f)) << 6) + uint16(uint8(_b[1] & 0x3f));\n  }\n\n  function threeBytesCodePoint(bytes memory _b) private pure returns (uint32) {\n    return\n      (uint16(uint8(_b[0] & bytes1(0x0f))) << 12) +\n      (uint16(uint8((_b[1] & bytes1(0x3f)))) << 6) +\n      uint16(uint8(_b[2] & 0x3f));\n  }\n\n  function fourBytesCodePoint(bytes memory _b) private pure returns (uint32) {\n    return\n      ((uint32(uint8(_b[0] & 0x07)) << 18)) +\n      (uint32(uint8(_b[1] & 0x3f)) << 12) +\n      (uint32(uint8(_b[2] & 0x3f)) << 6) +\n      uint8(_b[3] & 0x3f);\n  }\n\n  /// @notice Get length of `self`\n  /// @dev For efficiency, length assumes valid UTF-8 encoded input. It only does simple checks for bytes sequences\n  /// @param self The input string\n  /// @return The number of UTF-8 characters in `self`\n  function length(string calldata self) public pure returns (uint256) {\n    bytes memory _b = bytes(self);\n    uint256 end = _b.length;\n    uint256 len;\n    uint256 i;\n\n    while (i < end) {\n      len++;\n\n      if (isOneBytesSequence(_b[i])) {\n        i += 1;\n        continue;\n      } else if (isTwoBytesSequence(_b[i])) {\n        i += 2;\n        continue;\n      } else if (isThreeBytesSequence(_b[i])) {\n        i += 3;\n        continue;\n      } else if (isFourBytesSequence(_b[i])) {\n        i += 4;\n        continue;\n      }\n\n      require(false, \"invalid utf8\");\n    }\n\n    return len;\n  }\n\n  /// @notice Get the code point of character: `self`\n  /// @dev This function requires a valid UTF-8 character\n  /// @param self The input character\n  /// @return The code point of `self`\n  function toCodePoint(string memory self) public pure returns (uint32) {\n    bytes memory _b = bytes(self);\n    uint256 len = _b.length;\n\n    require(\n      len <= 4,\n      \"invalid utf8 character: a character cannot be more than four bytes\"\n    );\n    require(len > 0, \"invalid utf8 character: empty string\");\n\n    if (isOneBytesSequence(_b[0])) return uint8(bytes1(_b[0]));\n\n    require(len > 1, \"invalid utf8 character\");\n\n    /* 0b110xxxxx: 2 bytes sequence */\n    /* U+0080..U+07FF */\n    if (isTwoBytesSequence(_b[0])) {\n      return twoBytesCodePoint(_b);\n    }\n\n    require(len > 2, \"invalid utf8 character\");\n\n    /* 0b1110xxxx: 3 bytes sequence */\n    /* 3 bytes sequence: U+0800..U+FFFF */\n    if (isThreeBytesSequence(_b[0])) {\n      return threeBytesCodePoint(_b);\n    }\n\n    require(len > 3, \"invalid utf8 character\");\n\n    /* 0b11110xxx: 4 bytes sequence */\n    /* 4 bytes sequence: U+10000..U+10FFFF */\n    if (isFourBytesSequence(_b[0])) {\n      return fourBytesCodePoint(_b);\n    }\n\n    require(false, \"invalid utf8 character\");\n    return 0;\n  }\n\n  /// @notice Check if `self` is valid UTF-8\n  /// @param self The input string\n  /// @return True if the string is UTF-8 encoded\n  function isUTF8(string calldata self) external pure returns (bool) {\n    bytes memory _b = bytes(self);\n    uint256 end = _b.length;\n    uint32 cp;\n    uint256 i;\n\n    while (i < end) {\n      if (isOneBytesSequence(_b[i])) {\n        i += 1;\n        continue;\n      }\n\n      /* Check continuation bytes: bit 7 should be set, bit 6 should be\n       * unset (b10xxxxxx). */\n      if (isContinuationByte(_b[i + 1])) return false;\n\n      /* 0b110xxxxx: 2 bytes sequence */\n      /* U+0080..U+07FF */\n      if (isTwoBytesSequence(_b[i])) {\n        cp = twoBytesCodePoint(bytes.concat(_b[i], _b[i + 1]));\n\n        if (cp < 0x0080 || cp > 0x07FF) return false;\n\n        i += 2;\n        continue;\n      }\n\n      if (isContinuationByte(_b[i + 2])) return false;\n\n      /* 0b1110xxxx: 3 bytes sequence */\n      /* 3 bytes sequence: U+0800..U+FFFF */\n      if (isThreeBytesSequence(_b[i])) {\n        cp = threeBytesCodePoint(bytes.concat(_b[i], _b[i + 1], _b[i + 2]));\n\n        /* (0xff & 0x0f) << 12 | (0xff & 0x3f) << 6 | (0xff & 0x3f) = 0xffff,\n                   so cp <= 0xffff */\n        if (cp < 0x0800) return false;\n\n        /* surrogates (U+D800-U+DFFF) are invalid in UTF-8:\n                   test if (0xD800 <= cp && cp <= 0xDFFF) */\n        if ((cp >> 11) == 0x1b) return false;\n        i += 3;\n        continue;\n      }\n\n      if (isContinuationByte(_b[i + 3])) return false;\n\n      /* 4 bytes sequence: U+10000..U+10FFFF */\n      /* 0b11110xxx: 4 bytes sequence */\n      if (isFourBytesSequence(_b[i])) {\n        cp = fourBytesCodePoint(\n          bytes.concat(_b[i], _b[i + 1], _b[i + 2], _b[i + 3])\n        );\n\n        if ((cp < 0x10000) && (cp > 0x10FFFF)) return false;\n\n        i += 4;\n        continue;\n      }\n\n      // invalid\n      return false;\n    }\n\n    return true;\n  }\n\n  /// @notice Decode the next UTF-8 character in `self` given a starting position of `_cursor`\n  /// @dev decodeChar is useful for functions want to iterate over the string in one pass and check each category for a condition\n  /// @param self The input string\n  /// @param _cursor The starting bytes position (inclusive) of the character\n  /// @return The next character as a string and the starting position of the next character.\n  function decodeChar(string calldata self, uint256 _cursor)\n    public\n    pure\n    returns (string memory, uint256)\n  {\n    bytes memory _b = bytes(self);\n    uint256 len = _b.length;\n    bytes memory output;\n    uint32 cp;\n\n    require(_cursor < len, \"invalid cursor: cursor out of bounds\");\n    output = bytes.concat(output, _b[_cursor]);\n    _cursor++;\n\n    // ASCII\n    /* 1 byte sequence: U+0000..U+007F */\n    if (isOneBytesSequence(output[0])) return (string(output), _cursor);\n\n    require(_cursor < len, \"invalid cursor: cursor out of bounds\");\n    /* Check continuation bytes: bit 7 should be set, bit 6 should be\n     * unset (b10xxxxxx). */\n    require(\n      !isContinuationByte(_b[_cursor]),\n      \"only bit 7 should contain a continuation byte\"\n    );\n    output = bytes.concat(output, _b[_cursor]);\n    _cursor++;\n\n    /* 0b110xxxxx: 2 bytes sequence */\n    /* U+0080..U+07FF */\n    if (isTwoBytesSequence(output[0])) {\n      cp = twoBytesCodePoint(output);\n      require(\n        cp >= 0x0080 && cp <= 0x07FF,\n        \"invalid character: out of two bytes sequence range U+0080..U+07FF\"\n      );\n\n      return (string(output), _cursor);\n    }\n\n    require(_cursor < len, \"invalid cursor: cursor out of bounds\");\n    /* Check continuation bytes: bit 7 should be set, bit 6 should be\n     * unset (b10xxxxxx). */\n    require(\n      !isContinuationByte(_b[_cursor]),\n      \"only bit 7 should contain a continuation byte\"\n    );\n    output = bytes.concat(output, _b[_cursor]);\n    _cursor++;\n\n    /* 0b1110xxxx: 3 bytes sequence */\n    /* 3 bytes sequence: U+0800..U+FFFF */\n    if (isThreeBytesSequence(output[0])) {\n      cp = threeBytesCodePoint(output);\n      /* threeBytesCodePoint(cp) will always be <= 0xFFFF */\n      require(\n        cp >= 0x0800,\n        \"invalid character: out of three bytes sequence range U+0800..U+FFFF\"\n      );\n\n      /* surrogates (U+D800-U+DFFF) are invalid in UTF-8:\n               test if (0xD800 <= cp && cp <= 0xDFFF) */\n      require((cp >> 11) != 0x1b, \"surrogates are invalid in UTF-8\");\n\n      return (string(output), _cursor);\n    }\n\n    require(_cursor < len, \"invalid cursor: cursor out of bounds\");\n    /* Check continuation bytes: bit 7 (left-most) should be set, bit 6 should be\n     * unset (b10xxxxxx). */\n    require(\n      !isContinuationByte(_b[_cursor]),\n      \"only bit 7 should contain a continuation byte\"\n    );\n    output = bytes.concat(output, _b[_cursor]);\n    _cursor++;\n\n    /* 0b11110xxx: 4 bytes sequence */\n    /* 4 bytes sequence: U+10000..U+10FFFF */\n    if (isFourBytesSequence(output[0])) {\n      cp = fourBytesCodePoint(output);\n\n      require(\n        (cp >= 0x10000) && (cp <= 0x10FFFF),\n        \"invalid character: out of four bytes sequence range  U+10000..U+10FFFF\"\n      );\n\n      return (string(output), _cursor);\n    }\n\n    require(false, \"invalid utf8\");\n    return (\"\", 0);\n  }\n\n  /// @notice Decode every UTF-8 characters in `self`\n  /// @param self The input string\n  /// @return An ordered array of all UTF-8 characters  in `self`\n  function decode(string calldata self)\n    external\n    pure\n    returns (string[] memory)\n  {\n    // The charaters array must be initialized to a fixed size.\n    // Loop over the string to get the number of charcters before decoding.\n    uint256 size = length(self);\n    string[] memory characters = new string[](size);\n\n    string memory char;\n    uint256 cursor = 0;\n    uint256 len = bytes(self).length;\n    uint256 idx;\n\n    while (cursor < len) {\n      (char, cursor) = decodeChar(self, cursor);\n      characters[idx] = char;\n      idx++;\n    }\n\n    return characters;\n  }\n\n  /// @notice Get the UTF-8 character at `_idx` for `self`\n  /// @dev charAt will error if the idx is out of bounds\n  /// @param self The input string\n  /// @param _idx The index of the character to get\n  /// @return The character at the given index\n  function charAt(string calldata self, uint256 _idx)\n    public\n    pure\n    returns (string memory)\n  {\n    string memory char;\n    uint256 len = bytes(self).length;\n    uint256 cursor;\n\n    for (uint256 i = 0; i <= _idx; i++) {\n      (char, cursor) = decodeChar(self, cursor);\n      // if we hit the end, it must be the _idx\n      require(cursor < len || i == _idx, \"index out of bounds\");\n    }\n\n    return char;\n  }\n\n  /// @notice Get the Unicode code point at `_idx` for `self`\n  /// @dev codePointAt requires a valid UTF-8 string\n  /// @param self The input string\n  /// @param _idx The index of the code point to get\n  /// @return The Unicode code point at the given index\n  function codePointAt(string calldata self, uint256 _idx)\n    external\n    pure\n    returns (uint32)\n  {\n    return toCodePoint(charAt(self, _idx));\n  }\n\n  /// @notice The return value of indexOf and bytesIndicesOf if the character is not found\n  /// @dev Use CHAR_NOT_FOUND to check if indexOf or bytesIndicesOf does not find the inputted character\n  uint256 public constant CHAR_NOT_FOUND = type(uint256).max;\n\n  /// @notice Get the character index of `_of` in string `self`\n  /// @dev indexOf returns CHAR_NOT_FOUND if `_of` isn't found in `self`\n  /// @param self The input string\n  /// @param _of The character to find the index of\n  /// @return The index of the character in the given string\n  function indexOf(string calldata self, string calldata _of)\n    external\n    pure\n    returns (uint256)\n  {\n    string memory char;\n    uint256 cursor = 0;\n    uint256 len = bytes(self).length;\n    uint256 idx;\n\n    while (cursor < len) {\n      (char, cursor) = decodeChar(self, cursor);\n      if (keccak256(bytes(char)) == keccak256(bytes(_of))) return idx;\n      idx++;\n    }\n\n    return CHAR_NOT_FOUND;\n  }\n\n  /// @notice Get the starting (inclusive) and ending (exclusive) bytes indices of character `_of` in string `self`\n  /// @dev bytesIndicesOf returns (CHAR_NOT_FOUND, CHAR_NOT_FOUND) if `_of` isn't found in `self`\n  /// @param self The input string\n  /// @param _of The character to find the bytes indices of\n  /// @return The starting (inclusive) and ending (exclusive) indites the character in the bytes underlying the string\n  function bytesIndicesOf(string calldata self, string calldata _of)\n    external\n    pure\n    returns (uint256, uint256)\n  {\n    string memory char;\n    uint256 start;\n    uint256 cursor = 0;\n    uint256 len = bytes(self).length;\n\n    while (cursor < len) {\n      // start is the prev cursor before the character\n      start = cursor;\n      (char, cursor) = decodeChar(self, cursor);\n      if (keccak256(bytes(char)) == keccak256(bytes(_of)))\n        return (start, cursor);\n    }\n\n    return (CHAR_NOT_FOUND, CHAR_NOT_FOUND);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}