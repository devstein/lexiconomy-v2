{
  "address": "0xed8B068d33FF6C776bfd0d8D4898594ECd36eF0B",
  "abi": [
    {
      "inputs": [],
      "name": "CHAR_NOT_FOUND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_of",
          "type": "string"
        }
      ],
      "name": "bytesIndicesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "charAt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "codePointAt",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        }
      ],
      "name": "decode",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_cursor",
          "type": "uint256"
        }
      ],
      "name": "decodeChar",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_of",
          "type": "string"
        }
      ],
      "name": "indexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        }
      ],
      "name": "isASCII",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        }
      ],
      "name": "isUTF8",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        }
      ],
      "name": "length",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "self",
          "type": "string"
        }
      ],
      "name": "toCodePoint",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xbab4a6655781b8873ca27e6e939c6a1518271686c63a9637657450996d7f69fa",
  "receipt": {
    "to": null,
    "from": "0xC7346259a4a2E1ECCb34d7a2b124cbe0D8a98497",
    "contractAddress": "0xed8B068d33FF6C776bfd0d8D4898594ECd36eF0B",
    "transactionIndex": 19,
    "gasUsed": "1440004",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000004000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000000000000004010000000000000000001000000000000000000000000000000100040000000000000000000000000000000800000000008000000000000000000000000100000",
    "blockHash": "0x2e6234b294d00f4b4a40c3765d2fa40329bd62150725919ee280b4c3c6c182be",
    "transactionHash": "0xbab4a6655781b8873ca27e6e939c6a1518271686c63a9637657450996d7f69fa",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 24336583,
        "transactionHash": "0xbab4a6655781b8873ca27e6e939c6a1518271686c63a9637657450996d7f69fa",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7346259a4a2e1eccb34d7a2b124cbe0d8a98497",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a3b5a1d1a87e000000000000000000000000000000000000000000000000006e1e77cfd35dc600000000000000000000000000000000000000000000005a71e48c7925dd9b75800000000000000000000000000000000000000000000000006d7ac22e01b54800000000000000000000000000000000000000000000005a71e5302ec7af43f38",
        "logIndex": 43,
        "blockHash": "0x2e6234b294d00f4b4a40c3765d2fa40329bd62150725919ee280b4c3c6c182be"
      }
    ],
    "blockNumber": 24336583,
    "cumulativeGasUsed": "4689179",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79c01f313d6a9b5972f33996bb25049d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CHAR_NOT_FOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_of\",\"type\":\"string\"}],\"name\":\"bytesIndicesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"charAt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"codePointAt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"}],\"name\":\"decode\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_cursor\",\"type\":\"uint256\"}],\"name\":\"decodeChar\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_of\",\"type\":\"string\"}],\"name\":\"indexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"}],\"name\":\"isASCII\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"}],\"name\":\"isUTF8\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"}],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"self\",\"type\":\"string\"}],\"name\":\"toCodePoint\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Devin Stein\",\"details\":\"All external and public functions use self as their first parameter to allow \\\"using Unicode for strings;\\\". If you have ideas for new functions or improvements, please contribute!\",\"kind\":\"dev\",\"methods\":{\"bytesIndicesOf(string,string)\":{\"details\":\"bytesIndicesOf returns (CHAR_NOT_FOUND, CHAR_NOT_FOUND) if `_of` isn't found in `self`\",\"params\":{\"_of\":\"The character to find the bytes indices of\",\"self\":\"The input string\"},\"returns\":{\"_0\":\"The starting (inclusive) and ending (exclusive) indites the character in the bytes underlying the string\"}},\"charAt(string,uint256)\":{\"details\":\"charAt will error if the idx is out of bounds\",\"params\":{\"_idx\":\"The index of the character to get\",\"self\":\"The input string\"},\"returns\":{\"_0\":\"The character at the given index\"}},\"codePointAt(string,uint256)\":{\"details\":\"codePointAt requires a valid UTF-8 string\",\"params\":{\"_idx\":\"The index of the code point to get\",\"self\":\"The input string\"},\"returns\":{\"_0\":\"The Unicode code point at the given index\"}},\"decode(string)\":{\"params\":{\"self\":\"The input string\"},\"returns\":{\"_0\":\"An ordered array of all UTF-8 characters  in `self`\"}},\"decodeChar(string,uint256)\":{\"details\":\"decodeChar is useful for functions want to iterate over the string in one pass and check each category for a condition\",\"params\":{\"_cursor\":\"The starting bytes position (inclusive) of the character\",\"self\":\"The input string\"},\"returns\":{\"_0\":\"The next character as a string and the starting position of the next character.\"}},\"indexOf(string,string)\":{\"details\":\"indexOf returns CHAR_NOT_FOUND if `_of` isn't found in `self`\",\"params\":{\"_of\":\"The character to find the index of\",\"self\":\"The input string\"},\"returns\":{\"_0\":\"The index of the character in the given string\"}},\"isASCII(string)\":{\"details\":\"If a string is only ASCII, then it's safe to treat each byte as a character. This returns false for extended ASCII (128-255) because they are use two bytes in UTF-8.\",\"params\":{\"self\":\"The input string\"},\"returns\":{\"_0\":\"True if  the `self` only contains ASCII\"}},\"isUTF8(string)\":{\"params\":{\"self\":\"The input string\"},\"returns\":{\"_0\":\"True if the string is UTF-8 encoded\"}},\"length(string)\":{\"details\":\"For efficiency, length assumes valid UTF-8 encoded input. It only does simple checks for bytes sequences\",\"params\":{\"self\":\"The input string\"},\"returns\":{\"_0\":\"The number of UTF-8 characters in `self`\"}},\"toCodePoint(string)\":{\"details\":\"This function requires a valid UTF-8 character\",\"params\":{\"self\":\"The input character\"},\"returns\":{\"_0\":\"The code point of `self`\"}}},\"stateVariables\":{\"CHAR_NOT_FOUND\":{\"details\":\"Use CHAR_NOT_FOUND to check if indexOf or bytesIndicesOf does not find the inputted character\"}},\"title\":\"A library for validating, parsing, and manipulating UTF-8 encoded Unicode strings\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CHAR_NOT_FOUND()\":{\"notice\":\"The return value of indexOf and bytesIndicesOf if the character is not found\"},\"bytesIndicesOf(string,string)\":{\"notice\":\"Get the starting (inclusive) and ending (exclusive) bytes indices of character `_of` in string `self`\"},\"charAt(string,uint256)\":{\"notice\":\"Get the UTF-8 character at `_idx` for `self`\"},\"codePointAt(string,uint256)\":{\"notice\":\"Get the Unicode code point at `_idx` for `self`\"},\"decode(string)\":{\"notice\":\"Decode every UTF-8 characters in `self`\"},\"decodeChar(string,uint256)\":{\"notice\":\"Decode the next UTF-8 character in `self` given a starting position of `_cursor`\"},\"indexOf(string,string)\":{\"notice\":\"Get the character index of `_of` in string `self`\"},\"isASCII(string)\":{\"notice\":\"Check if `self` contains only single byte ASCII characters (0-127)\"},\"isUTF8(string)\":{\"notice\":\"Check if `self` is valid UTF-8\"},\"length(string)\":{\"notice\":\"Get length of `self`\"},\"toCodePoint(string)\":{\"notice\":\"Get the code point of character: `self`\"}},\"notice\":\"For character introspection or more complex transformations, checkout the UnicodeData contract.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"unicode-eth/contracts/Unicode.sol\":\"Unicode\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"unicode-eth/contracts/Unicode.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title A library for validating, parsing, and manipulating UTF-8 encoded Unicode strings\\n/// @author Devin Stein\\n/// @notice For character introspection or more complex transformations, checkout the UnicodeData contract.\\n/// @dev All external and public functions use self as their first parameter to allow \\\"using Unicode for strings;\\\". If you have ideas for new functions or improvements, please contribute!\\nlibrary Unicode {\\n  /// @notice Check if `self` contains only single byte ASCII characters (0-127)\\n  /// @dev If a string is only ASCII, then it's safe to treat each byte as a character. This returns false for extended ASCII (128-255) because they are use two bytes in UTF-8.\\n  /// @param self The input string\\n  /// @return True if  the `self` only contains ASCII\\n  function isASCII(string calldata self) external pure returns (bool) {\\n    bytes calldata _b = bytes(self);\\n    uint256 len = _b.length;\\n\\n    for (uint256 i = 0; i < len; i++) {\\n      if ((_b[i] & 0x80) != 0x00) return false;\\n    }\\n    return true;\\n  }\\n\\n  // ASCII\\n  /* 1 byte sequence: U+0000..U+007F */\\n  function isOneBytesSequence(bytes1 _b) private pure returns (bool) {\\n    return _b[0] <= 0x7F;\\n  }\\n\\n  /* 0b110xxxxx: 2 bytes sequence */\\n  /* U+0080..U+07FF */\\n  function isTwoBytesSequence(bytes1 _b) private pure returns (bool) {\\n    return bytes1(0xC2) <= _b[0] && _b[0] <= bytes1(0xDF);\\n  }\\n\\n  /* 0b1110xxxx: 3 bytes sequence */\\n  /* 3 bytes sequence: U+0800..U+FFFF */\\n  function isThreeBytesSequence(bytes1 _b) private pure returns (bool) {\\n    return bytes1(0xE0) <= _b[0] && _b[0] <= bytes1(0xEF);\\n  }\\n\\n  /* 4 bytes sequence: U+10000..U+10FFFF */\\n  /* 0b11110xxx: 4 bytes sequence */\\n  function isFourBytesSequence(bytes1 _b) private pure returns (bool) {\\n    return bytes1(0xF0) <= _b[0] && _b[0] <= bytes1(0xF4);\\n  }\\n\\n  function isContinuationByte(bytes1 _b) private pure returns (bool) {\\n    return ((_b & 0xC0) != 0x80);\\n  }\\n\\n  function twoBytesCodePoint(bytes memory _b) private pure returns (uint32) {\\n    return (uint16(uint8(_b[0] & 0x1f)) << 6) + uint16(uint8(_b[1] & 0x3f));\\n  }\\n\\n  function threeBytesCodePoint(bytes memory _b) private pure returns (uint32) {\\n    return\\n      (uint16(uint8(_b[0] & bytes1(0x0f))) << 12) +\\n      (uint16(uint8((_b[1] & bytes1(0x3f)))) << 6) +\\n      uint16(uint8(_b[2] & 0x3f));\\n  }\\n\\n  function fourBytesCodePoint(bytes memory _b) private pure returns (uint32) {\\n    return\\n      ((uint32(uint8(_b[0] & 0x07)) << 18)) +\\n      (uint32(uint8(_b[1] & 0x3f)) << 12) +\\n      (uint32(uint8(_b[2] & 0x3f)) << 6) +\\n      uint8(_b[3] & 0x3f);\\n  }\\n\\n  /// @notice Get length of `self`\\n  /// @dev For efficiency, length assumes valid UTF-8 encoded input. It only does simple checks for bytes sequences\\n  /// @param self The input string\\n  /// @return The number of UTF-8 characters in `self`\\n  function length(string calldata self) public pure returns (uint256) {\\n    bytes memory _b = bytes(self);\\n    uint256 end = _b.length;\\n    uint256 len;\\n    uint256 i;\\n\\n    while (i < end) {\\n      len++;\\n\\n      if (isOneBytesSequence(_b[i])) {\\n        i += 1;\\n        continue;\\n      } else if (isTwoBytesSequence(_b[i])) {\\n        i += 2;\\n        continue;\\n      } else if (isThreeBytesSequence(_b[i])) {\\n        i += 3;\\n        continue;\\n      } else if (isFourBytesSequence(_b[i])) {\\n        i += 4;\\n        continue;\\n      }\\n\\n      require(false, \\\"invalid utf8\\\");\\n    }\\n\\n    return len;\\n  }\\n\\n  /// @notice Get the code point of character: `self`\\n  /// @dev This function requires a valid UTF-8 character\\n  /// @param self The input character\\n  /// @return The code point of `self`\\n  function toCodePoint(string memory self) public pure returns (uint32) {\\n    bytes memory _b = bytes(self);\\n    uint256 len = _b.length;\\n\\n    require(\\n      len <= 4,\\n      \\\"invalid utf8 character: a character cannot be more than four bytes\\\"\\n    );\\n    require(len > 0, \\\"invalid utf8 character: empty string\\\");\\n\\n    if (isOneBytesSequence(_b[0])) return uint8(bytes1(_b[0]));\\n\\n    require(len > 1, \\\"invalid utf8 character\\\");\\n\\n    /* 0b110xxxxx: 2 bytes sequence */\\n    /* U+0080..U+07FF */\\n    if (isTwoBytesSequence(_b[0])) {\\n      return twoBytesCodePoint(_b);\\n    }\\n\\n    require(len > 2, \\\"invalid utf8 character\\\");\\n\\n    /* 0b1110xxxx: 3 bytes sequence */\\n    /* 3 bytes sequence: U+0800..U+FFFF */\\n    if (isThreeBytesSequence(_b[0])) {\\n      return threeBytesCodePoint(_b);\\n    }\\n\\n    require(len > 3, \\\"invalid utf8 character\\\");\\n\\n    /* 0b11110xxx: 4 bytes sequence */\\n    /* 4 bytes sequence: U+10000..U+10FFFF */\\n    if (isFourBytesSequence(_b[0])) {\\n      return fourBytesCodePoint(_b);\\n    }\\n\\n    require(false, \\\"invalid utf8 character\\\");\\n    return 0;\\n  }\\n\\n  /// @notice Check if `self` is valid UTF-8\\n  /// @param self The input string\\n  /// @return True if the string is UTF-8 encoded\\n  function isUTF8(string calldata self) external pure returns (bool) {\\n    bytes memory _b = bytes(self);\\n    uint256 end = _b.length;\\n    uint32 cp;\\n    uint256 i;\\n\\n    while (i < end) {\\n      if (isOneBytesSequence(_b[i])) {\\n        i += 1;\\n        continue;\\n      }\\n\\n      /* Check continuation bytes: bit 7 should be set, bit 6 should be\\n       * unset (b10xxxxxx). */\\n      if (isContinuationByte(_b[i + 1])) return false;\\n\\n      /* 0b110xxxxx: 2 bytes sequence */\\n      /* U+0080..U+07FF */\\n      if (isTwoBytesSequence(_b[i])) {\\n        cp = twoBytesCodePoint(bytes.concat(_b[i], _b[i + 1]));\\n\\n        if (cp < 0x0080 || cp > 0x07FF) return false;\\n\\n        i += 2;\\n        continue;\\n      }\\n\\n      if (isContinuationByte(_b[i + 2])) return false;\\n\\n      /* 0b1110xxxx: 3 bytes sequence */\\n      /* 3 bytes sequence: U+0800..U+FFFF */\\n      if (isThreeBytesSequence(_b[i])) {\\n        cp = threeBytesCodePoint(bytes.concat(_b[i], _b[i + 1], _b[i + 2]));\\n\\n        /* (0xff & 0x0f) << 12 | (0xff & 0x3f) << 6 | (0xff & 0x3f) = 0xffff,\\n                   so cp <= 0xffff */\\n        if (cp < 0x0800) return false;\\n\\n        /* surrogates (U+D800-U+DFFF) are invalid in UTF-8:\\n                   test if (0xD800 <= cp && cp <= 0xDFFF) */\\n        if ((cp >> 11) == 0x1b) return false;\\n        i += 3;\\n        continue;\\n      }\\n\\n      if (isContinuationByte(_b[i + 3])) return false;\\n\\n      /* 4 bytes sequence: U+10000..U+10FFFF */\\n      /* 0b11110xxx: 4 bytes sequence */\\n      if (isFourBytesSequence(_b[i])) {\\n        cp = fourBytesCodePoint(\\n          bytes.concat(_b[i], _b[i + 1], _b[i + 2], _b[i + 3])\\n        );\\n\\n        if ((cp < 0x10000) && (cp > 0x10FFFF)) return false;\\n\\n        i += 4;\\n        continue;\\n      }\\n\\n      // invalid\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /// @notice Decode the next UTF-8 character in `self` given a starting position of `_cursor`\\n  /// @dev decodeChar is useful for functions want to iterate over the string in one pass and check each category for a condition\\n  /// @param self The input string\\n  /// @param _cursor The starting bytes position (inclusive) of the character\\n  /// @return The next character as a string and the starting position of the next character.\\n  function decodeChar(string calldata self, uint256 _cursor)\\n    public\\n    pure\\n    returns (string memory, uint256)\\n  {\\n    bytes memory _b = bytes(self);\\n    uint256 len = _b.length;\\n    bytes memory output;\\n    uint32 cp;\\n\\n    require(_cursor < len, \\\"invalid cursor: cursor out of bounds\\\");\\n    output = bytes.concat(output, _b[_cursor]);\\n    _cursor++;\\n\\n    // ASCII\\n    /* 1 byte sequence: U+0000..U+007F */\\n    if (isOneBytesSequence(output[0])) return (string(output), _cursor);\\n\\n    require(_cursor < len, \\\"invalid cursor: cursor out of bounds\\\");\\n    /* Check continuation bytes: bit 7 should be set, bit 6 should be\\n     * unset (b10xxxxxx). */\\n    require(\\n      !isContinuationByte(_b[_cursor]),\\n      \\\"only bit 7 should contain a continuation byte\\\"\\n    );\\n    output = bytes.concat(output, _b[_cursor]);\\n    _cursor++;\\n\\n    /* 0b110xxxxx: 2 bytes sequence */\\n    /* U+0080..U+07FF */\\n    if (isTwoBytesSequence(output[0])) {\\n      cp = twoBytesCodePoint(output);\\n      require(\\n        cp >= 0x0080 && cp <= 0x07FF,\\n        \\\"invalid character: out of two bytes sequence range U+0080..U+07FF\\\"\\n      );\\n\\n      return (string(output), _cursor);\\n    }\\n\\n    require(_cursor < len, \\\"invalid cursor: cursor out of bounds\\\");\\n    /* Check continuation bytes: bit 7 should be set, bit 6 should be\\n     * unset (b10xxxxxx). */\\n    require(\\n      !isContinuationByte(_b[_cursor]),\\n      \\\"only bit 7 should contain a continuation byte\\\"\\n    );\\n    output = bytes.concat(output, _b[_cursor]);\\n    _cursor++;\\n\\n    /* 0b1110xxxx: 3 bytes sequence */\\n    /* 3 bytes sequence: U+0800..U+FFFF */\\n    if (isThreeBytesSequence(output[0])) {\\n      cp = threeBytesCodePoint(output);\\n      /* threeBytesCodePoint(cp) will always be <= 0xFFFF */\\n      require(\\n        cp >= 0x0800,\\n        \\\"invalid character: out of three bytes sequence range U+0800..U+FFFF\\\"\\n      );\\n\\n      /* surrogates (U+D800-U+DFFF) are invalid in UTF-8:\\n               test if (0xD800 <= cp && cp <= 0xDFFF) */\\n      require((cp >> 11) != 0x1b, \\\"surrogates are invalid in UTF-8\\\");\\n\\n      return (string(output), _cursor);\\n    }\\n\\n    require(_cursor < len, \\\"invalid cursor: cursor out of bounds\\\");\\n    /* Check continuation bytes: bit 7 (left-most) should be set, bit 6 should be\\n     * unset (b10xxxxxx). */\\n    require(\\n      !isContinuationByte(_b[_cursor]),\\n      \\\"only bit 7 should contain a continuation byte\\\"\\n    );\\n    output = bytes.concat(output, _b[_cursor]);\\n    _cursor++;\\n\\n    /* 0b11110xxx: 4 bytes sequence */\\n    /* 4 bytes sequence: U+10000..U+10FFFF */\\n    if (isFourBytesSequence(output[0])) {\\n      cp = fourBytesCodePoint(output);\\n\\n      require(\\n        (cp >= 0x10000) && (cp <= 0x10FFFF),\\n        \\\"invalid character: out of four bytes sequence range  U+10000..U+10FFFF\\\"\\n      );\\n\\n      return (string(output), _cursor);\\n    }\\n\\n    require(false, \\\"invalid utf8\\\");\\n    return (\\\"\\\", 0);\\n  }\\n\\n  /// @notice Decode every UTF-8 characters in `self`\\n  /// @param self The input string\\n  /// @return An ordered array of all UTF-8 characters  in `self`\\n  function decode(string calldata self)\\n    external\\n    pure\\n    returns (string[] memory)\\n  {\\n    // The charaters array must be initialized to a fixed size.\\n    // Loop over the string to get the number of charcters before decoding.\\n    uint256 size = length(self);\\n    string[] memory characters = new string[](size);\\n\\n    string memory char;\\n    uint256 cursor = 0;\\n    uint256 len = bytes(self).length;\\n    uint256 idx;\\n\\n    while (cursor < len) {\\n      (char, cursor) = decodeChar(self, cursor);\\n      characters[idx] = char;\\n      idx++;\\n    }\\n\\n    return characters;\\n  }\\n\\n  /// @notice Get the UTF-8 character at `_idx` for `self`\\n  /// @dev charAt will error if the idx is out of bounds\\n  /// @param self The input string\\n  /// @param _idx The index of the character to get\\n  /// @return The character at the given index\\n  function charAt(string calldata self, uint256 _idx)\\n    public\\n    pure\\n    returns (string memory)\\n  {\\n    string memory char;\\n    uint256 len = bytes(self).length;\\n    uint256 cursor;\\n\\n    for (uint256 i = 0; i <= _idx; i++) {\\n      (char, cursor) = decodeChar(self, cursor);\\n      // if we hit the end, it must be the _idx\\n      require(cursor < len || i == _idx, \\\"index out of bounds\\\");\\n    }\\n\\n    return char;\\n  }\\n\\n  /// @notice Get the Unicode code point at `_idx` for `self`\\n  /// @dev codePointAt requires a valid UTF-8 string\\n  /// @param self The input string\\n  /// @param _idx The index of the code point to get\\n  /// @return The Unicode code point at the given index\\n  function codePointAt(string calldata self, uint256 _idx)\\n    external\\n    pure\\n    returns (uint32)\\n  {\\n    return toCodePoint(charAt(self, _idx));\\n  }\\n\\n  /// @notice The return value of indexOf and bytesIndicesOf if the character is not found\\n  /// @dev Use CHAR_NOT_FOUND to check if indexOf or bytesIndicesOf does not find the inputted character\\n  uint256 public constant CHAR_NOT_FOUND = type(uint256).max;\\n\\n  /// @notice Get the character index of `_of` in string `self`\\n  /// @dev indexOf returns CHAR_NOT_FOUND if `_of` isn't found in `self`\\n  /// @param self The input string\\n  /// @param _of The character to find the index of\\n  /// @return The index of the character in the given string\\n  function indexOf(string calldata self, string calldata _of)\\n    external\\n    pure\\n    returns (uint256)\\n  {\\n    string memory char;\\n    uint256 cursor = 0;\\n    uint256 len = bytes(self).length;\\n    uint256 idx;\\n\\n    while (cursor < len) {\\n      (char, cursor) = decodeChar(self, cursor);\\n      if (keccak256(bytes(char)) == keccak256(bytes(_of))) return idx;\\n      idx++;\\n    }\\n\\n    return CHAR_NOT_FOUND;\\n  }\\n\\n  /// @notice Get the starting (inclusive) and ending (exclusive) bytes indices of character `_of` in string `self`\\n  /// @dev bytesIndicesOf returns (CHAR_NOT_FOUND, CHAR_NOT_FOUND) if `_of` isn't found in `self`\\n  /// @param self The input string\\n  /// @param _of The character to find the bytes indices of\\n  /// @return The starting (inclusive) and ending (exclusive) indites the character in the bytes underlying the string\\n  function bytesIndicesOf(string calldata self, string calldata _of)\\n    external\\n    pure\\n    returns (uint256, uint256)\\n  {\\n    string memory char;\\n    uint256 start;\\n    uint256 cursor = 0;\\n    uint256 len = bytes(self).length;\\n\\n    while (cursor < len) {\\n      // start is the prev cursor before the character\\n      start = cursor;\\n      (char, cursor) = decodeChar(self, cursor);\\n      if (keccak256(bytes(char)) == keccak256(bytes(_of)))\\n        return (start, cursor);\\n    }\\n\\n    return (CHAR_NOT_FOUND, CHAR_NOT_FOUND);\\n  }\\n}\\n\",\"keccak256\":\"0xc4ed0fc9064e7142c3eb12f9b059fed5ac5d479e9d1cf043b7b263b3436c28a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61191361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c80634f7158b91161007b5780634f7158b91461016e5780638a0807b71461018e578063907824b8146101a15780639e5530e5146101c9578063a2be0d9d146101dc578063d2940927146101ef57600080fd5b8063127b597f146100b85780631eff8a76146100e25780633d75ec2614610105578063436a66e71461012d57806349145c911461014e575b600080fd5b6100cb6100c636600461148b565b6101f8565b6040516100d9929190611533565b60405180910390f35b6100f56100f0366004611555565b610807565b60405190151581526020016100d9565b610118610113366004611597565b610867565b604080519283526020830191909152016100d9565b61014061013b366004611555565b6108d9565b6040519081526020016100d9565b61016161015c366004611555565b6109d4565b6040516100d99190611603565b61018161017c36600461148b565b610a95565b6040516100d99190611658565b61014061019c366004611597565b610b21565b6101b46101af36600461148b565b610b96565b60405163ffffffff90911681526020016100d9565b6100f56101d7366004611555565b610ba6565b6101b46101ea366004611688565b610fc5565b61014060001981565b606060008085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508451949550606093509150508287106102635760405162461bcd60e51b815260040161025a90611739565b60405180910390fd5b818488815181106102765761027661177d565b602001015160f81c60f81b604051602001610292929190611793565b604051602081830303815290604052915086806102ae906117d8565b9750506102db826000815181106102c7576102c761177d565b01602001516001600160f81b0319166111cc565b156102ee575093508492506107ff915050565b82871061030d5760405162461bcd60e51b815260040161025a90611739565b6103418488815181106103225761032261177d565b01602001516001600160f81b031916600360fe1b16600160ff1b141590565b1561035e5760405162461bcd60e51b815260040161025a906117f3565b818488815181106103715761037161177d565b602001015160f81c60f81b60405160200161038d929190611793565b604051602081830303815290604052915086806103a9906117d8565b9750506103d6826000815181106103c2576103c261177d565b01602001516001600160f81b0319166111ed565b1561048f576103e48261121a565b905060808163ffffffff161015801561040557506107ff8163ffffffff1611155b6104815760405162461bcd60e51b815260206004820152604160248201527f696e76616c6964206368617261637465723a206f7574206f662074776f20627960448201527f7465732073657175656e63652072616e676520552b303038302e2e552b3037466064820152602360f91b608482015260a40161025a565b5093508492506107ff915050565b8287106104ae5760405162461bcd60e51b815260040161025a90611739565b6104c38488815181106103225761032261177d565b156104e05760405162461bcd60e51b815260040161025a906117f3565b818488815181106104f3576104f361177d565b602001015160f81c60f81b60405160200161050f929190611793565b6040516020818303038152906040529150868061052b906117d8565b975050610558826000815181106105445761054461177d565b01602001516001600160f81b031916611280565b1561064c57610566826112ad565b90506108008163ffffffff1610156105f25760405162461bcd60e51b815260206004820152604360248201527f696e76616c6964206368617261637465723a206f7574206f662074687265652060448201527f62797465732073657175656e63652072616e676520552b303830302e2e552b4660648201526223232360e91b608482015260a40161025a565b601b621fffff600b83901c1614156104815760405162461bcd60e51b815260206004820152601f60248201527f737572726f67617465732061726520696e76616c696420696e205554462d3800604482015260640161025a565b82871061066b5760405162461bcd60e51b815260040161025a90611739565b6106808488815181106103225761032261177d565b1561069d5760405162461bcd60e51b815260040161025a906117f3565b818488815181106106b0576106b061177d565b602001015160f81c60f81b6040516020016106cc929190611793565b604051602081830303815290604052915086806106e8906117d8565b975050610715826000815181106107015761070161177d565b01602001516001600160f81b03191661133d565b156107c8576107238261136a565b9050620100008163ffffffff161015801561074757506210ffff8163ffffffff1611155b6104815760405162461bcd60e51b815260206004820152604660248201527f696e76616c6964206368617261637465723a206f7574206f6620666f7572206260448201527f797465732073657175656e63652072616e67652020552b31303030302e2e552b60648201526518982323232360d11b608482015260a40161025a565b60405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840eae8cc760a31b604482015260640161025a565b935093915050565b6000828280835b81811015610858578383828181106108285761082861177d565b90910135600160ff1b16159050610846576000945050505050610861565b80610850816117d8565b91505061080e565b50600193505050505b92915050565b60008060608180875b808210156108c3578192506108868a8a846101f8565b604051919550925061089b9089908990611840565b6040518091039020848051906020012014156108be575090935091506108d09050565b610870565b6000198095509550505050505b94509492505050565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509250829150505b828110156109ca578161092c816117d8565b9250506109448482815181106102c7576102c761177d565b1561095b57610954600182611850565b905061091a565b6109708482815181106103c2576103c261177d565b1561098057610954600282611850565b6109958482815181106105445761054461177d565b156109a557610954600382611850565b6109ba8482815181106107015761070161177d565b156107c857610954600482611850565b5095945050505050565b606060006109e284846108d9565b905060008167ffffffffffffffff8111156109ff576109ff611672565b604051908082528060200260200182016040528015610a3257816020015b6060815260200190600190039081610a1d5790505b5090506060600085815b81831015610a8857610a4f8989856101f8565b809450819550505083858281518110610a6a57610a6a61177d565b60200260200101819052508080610a80906117d8565b915050610a3c565b5092979650505050505050565b606080836000805b858111610b1557610aaf8888846101f8565b909450915082821080610ac157508581145b610b035760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b604482015260640161025a565b80610b0d816117d8565b915050610a9d565b50919695505050505050565b600060608185815b81831015610b8457610b3c8989856101f8565b6040519195509350610b519088908890611840565b604051809103902084805190602001201415610b72579350610b8e92505050565b80610b7c816117d8565b915050610b29565b6000199450505050505b949350505050565b6000610b8e6101ea858585610a95565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509250829150505b82811015610fb857610c048482815181106102c7576102c761177d565b15610c1b57610c14600182611850565b9050610be7565b610c3a84610c2a836001611850565b815181106103225761032261177d565b15610c4c576000945050505050610861565b610c618482815181106103c2576103c261177d565b15610d1e57610ce3848281518110610c7b57610c7b61177d565b01602001516001600160f81b03191685610c96846001611850565b81518110610ca657610ca661177d565b016020908101516040516001600160f81b03199384169281019290925291909116602182015260220160405160208183030381529060405261121a565b915060808263ffffffff161080610d0157506107ff8263ffffffff16115b15610d13576000945050505050610861565b610c14600282611850565b610d2d84610c2a836002611850565b15610d3f576000945050505050610861565b610d548482815181106105445761054461177d565b15610e5057610e07848281518110610d6e57610d6e61177d565b01602001516001600160f81b03191685610d89846001611850565b81518110610d9957610d9961177d565b01602001516001600160f81b03191686610db4856002611850565b81518110610dc457610dc461177d565b016020908101516040516001600160f81b0319948516928101929092529183166021820152911660228201526023016040516020818303038152906040526112ad565b91506108008263ffffffff161015610e26576000945050505050610861565b601b621fffff600b84901c161415610e45576000945050505050610861565b610c14600382611850565b610e5f84610c2a836003611850565b15610e71576000945050505050610861565b610e868482815181106107015761070161177d565b15610fab57610f6c848281518110610ea057610ea061177d565b01602001516001600160f81b03191685610ebb846001611850565b81518110610ecb57610ecb61177d565b01602001516001600160f81b03191686610ee6856002611850565b81518110610ef657610ef661177d565b01602001516001600160f81b03191687610f11866003611850565b81518110610f2157610f2161177d565b016020908101516040516001600160f81b031995861692810192909252928416602182015290831660228201529116602382015260240160405160208183030381529060405261136a565b9150620100008263ffffffff16108015610f8e57506210ffff8263ffffffff16115b15610fa0576000945050505050610861565b610c14600482611850565b6000945050505050610861565b5060019695505050505050565b80516000908290600481111561104e5760405162461bcd60e51b815260206004820152604260248201527f696e76616c69642075746638206368617261637465723a20612063686172616360448201527f7465722063616e6e6f74206265206d6f7265207468616e20666f757220627974606482015261657360f01b608482015260a40161025a565b600081116110aa5760405162461bcd60e51b8152602060048201526024808201527f696e76616c69642075746638206368617261637465723a20656d70747920737460448201526372696e6760e01b606482015260840161025a565b6110c0826000815181106102c7576102c761177d565b156110e857816000815181106110d8576110d861177d565b016020015160f81c949350505050565b600181116111085760405162461bcd60e51b815260040161025a90611868565b61111e826000815181106103c2576103c261177d565b1561112c57610b8e8261121a565b6002811161114c5760405162461bcd60e51b815260040161025a90611868565b611162826000815181106105445761054461177d565b1561117057610b8e826112ad565b600381116111905760405162461bcd60e51b815260040161025a90611868565b6111a6826000815181106107015761070161177d565b156111b457610b8e8261136a565b60405162461bcd60e51b815260040161025a90611868565b6000607f60f81b82825b1a60f81b6001600160f81b03191611159050919050565b600081811a60f81b6001600160f81b031916606160f91b11801590610861575060df60f81b8260006111d6565b60008160018151811061122f5761122f61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff1660068360008151811061125b5761125b61177d565b602091010151611276929160f89190911c601f16901b611898565b61ffff1692915050565b600081811a60f81b6001600160f81b031916600760fd1b11801590610861575060ef60f81b8260006111d6565b6000816002815181106112c2576112c261177d565b602001015160f81c60f81b603f60f81b1660f81c60ff166006603f60f81b846001815181106112f3576112f361177d565b01602001518551911660f81c90911b90600c90600f60f81b90869060009061131d5761131d61177d565b01602001516113339392911660f81c901b611898565b6112769190611898565b600081811a60f81b6001600160f81b031916600f60fc1b118015906108615750603d60fa1b8260006111d6565b60008160038151811061137f5761137f61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff166006836002815181106113ab576113ab61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff1663ffffffff16901b600c846001815181106113df576113df61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff1663ffffffff16901b6012856000815181106114135761141361177d565b60209101015161142e929160f89190911c600716901b6118be565b61143891906118be565b61086191906118be565b60008083601f84011261145457600080fd5b50813567ffffffffffffffff81111561146c57600080fd5b60208301915083602082850101111561148457600080fd5b9250929050565b6000806000604084860312156114a057600080fd5b833567ffffffffffffffff8111156114b757600080fd5b6114c386828701611442565b909790965060209590950135949350505050565b60005b838110156114f25781810151838201526020016114da565b83811115611501576000848401525b50505050565b6000815180845261151f8160208601602086016114d7565b601f01601f19169290920160200192915050565b6040815260006115466040830185611507565b90508260208301529392505050565b6000806020838503121561156857600080fd5b823567ffffffffffffffff81111561157f57600080fd5b61158b85828601611442565b90969095509350505050565b600080600080604085870312156115ad57600080fd5b843567ffffffffffffffff808211156115c557600080fd5b6115d188838901611442565b909650945060208701359150808211156115ea57600080fd5b506115f787828801611442565b95989497509550505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610a8857603f19888603018452611646858351611507565b9450928501929085019060010161162a565b60208152600061166b6020830184611507565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561169a57600080fd5b813567ffffffffffffffff808211156116b257600080fd5b818401915084601f8301126116c657600080fd5b8135818111156116d8576116d8611672565b604051601f8201601f19908116603f0116810190838211818310171561170057611700611672565b8160405282815287602084870101111561171957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60208082526024908201527f696e76616c696420637572736f723a20637572736f72206f7574206f6620626f604082015263756e647360e01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600083516117a58184602088016114d7565b6001600160f81b0319939093169190920190815260010192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156117ec576117ec6117c2565b5060010190565b6020808252602d908201527f6f6e6c792062697420372073686f756c6420636f6e7461696e206120636f6e7460408201526c696e756174696f6e206279746560981b606082015260800190565b8183823760009101908152919050565b60008219821115611863576118636117c2565b500190565b60208082526016908201527534b73b30b634b2103aba331c1031b430b930b1ba32b960511b604082015260600190565b600061ffff8083168185168083038211156118b5576118b56117c2565b01949350505050565b600063ffffffff8083168185168083038211156118b5576118b56117c256fea26469706673582212206cdadf76a5743d5ad6818d1adab4bbba7d4207cccf744190230ed4f9846efde264736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100b35760003560e01c80634f7158b91161007b5780634f7158b91461016e5780638a0807b71461018e578063907824b8146101a15780639e5530e5146101c9578063a2be0d9d146101dc578063d2940927146101ef57600080fd5b8063127b597f146100b85780631eff8a76146100e25780633d75ec2614610105578063436a66e71461012d57806349145c911461014e575b600080fd5b6100cb6100c636600461148b565b6101f8565b6040516100d9929190611533565b60405180910390f35b6100f56100f0366004611555565b610807565b60405190151581526020016100d9565b610118610113366004611597565b610867565b604080519283526020830191909152016100d9565b61014061013b366004611555565b6108d9565b6040519081526020016100d9565b61016161015c366004611555565b6109d4565b6040516100d99190611603565b61018161017c36600461148b565b610a95565b6040516100d99190611658565b61014061019c366004611597565b610b21565b6101b46101af36600461148b565b610b96565b60405163ffffffff90911681526020016100d9565b6100f56101d7366004611555565b610ba6565b6101b46101ea366004611688565b610fc5565b61014060001981565b606060008085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508451949550606093509150508287106102635760405162461bcd60e51b815260040161025a90611739565b60405180910390fd5b818488815181106102765761027661177d565b602001015160f81c60f81b604051602001610292929190611793565b604051602081830303815290604052915086806102ae906117d8565b9750506102db826000815181106102c7576102c761177d565b01602001516001600160f81b0319166111cc565b156102ee575093508492506107ff915050565b82871061030d5760405162461bcd60e51b815260040161025a90611739565b6103418488815181106103225761032261177d565b01602001516001600160f81b031916600360fe1b16600160ff1b141590565b1561035e5760405162461bcd60e51b815260040161025a906117f3565b818488815181106103715761037161177d565b602001015160f81c60f81b60405160200161038d929190611793565b604051602081830303815290604052915086806103a9906117d8565b9750506103d6826000815181106103c2576103c261177d565b01602001516001600160f81b0319166111ed565b1561048f576103e48261121a565b905060808163ffffffff161015801561040557506107ff8163ffffffff1611155b6104815760405162461bcd60e51b815260206004820152604160248201527f696e76616c6964206368617261637465723a206f7574206f662074776f20627960448201527f7465732073657175656e63652072616e676520552b303038302e2e552b3037466064820152602360f91b608482015260a40161025a565b5093508492506107ff915050565b8287106104ae5760405162461bcd60e51b815260040161025a90611739565b6104c38488815181106103225761032261177d565b156104e05760405162461bcd60e51b815260040161025a906117f3565b818488815181106104f3576104f361177d565b602001015160f81c60f81b60405160200161050f929190611793565b6040516020818303038152906040529150868061052b906117d8565b975050610558826000815181106105445761054461177d565b01602001516001600160f81b031916611280565b1561064c57610566826112ad565b90506108008163ffffffff1610156105f25760405162461bcd60e51b815260206004820152604360248201527f696e76616c6964206368617261637465723a206f7574206f662074687265652060448201527f62797465732073657175656e63652072616e676520552b303830302e2e552b4660648201526223232360e91b608482015260a40161025a565b601b621fffff600b83901c1614156104815760405162461bcd60e51b815260206004820152601f60248201527f737572726f67617465732061726520696e76616c696420696e205554462d3800604482015260640161025a565b82871061066b5760405162461bcd60e51b815260040161025a90611739565b6106808488815181106103225761032261177d565b1561069d5760405162461bcd60e51b815260040161025a906117f3565b818488815181106106b0576106b061177d565b602001015160f81c60f81b6040516020016106cc929190611793565b604051602081830303815290604052915086806106e8906117d8565b975050610715826000815181106107015761070161177d565b01602001516001600160f81b03191661133d565b156107c8576107238261136a565b9050620100008163ffffffff161015801561074757506210ffff8163ffffffff1611155b6104815760405162461bcd60e51b815260206004820152604660248201527f696e76616c6964206368617261637465723a206f7574206f6620666f7572206260448201527f797465732073657175656e63652072616e67652020552b31303030302e2e552b60648201526518982323232360d11b608482015260a40161025a565b60405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840eae8cc760a31b604482015260640161025a565b935093915050565b6000828280835b81811015610858578383828181106108285761082861177d565b90910135600160ff1b16159050610846576000945050505050610861565b80610850816117d8565b91505061080e565b50600193505050505b92915050565b60008060608180875b808210156108c3578192506108868a8a846101f8565b604051919550925061089b9089908990611840565b6040518091039020848051906020012014156108be575090935091506108d09050565b610870565b6000198095509550505050505b94509492505050565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509250829150505b828110156109ca578161092c816117d8565b9250506109448482815181106102c7576102c761177d565b1561095b57610954600182611850565b905061091a565b6109708482815181106103c2576103c261177d565b1561098057610954600282611850565b6109958482815181106105445761054461177d565b156109a557610954600382611850565b6109ba8482815181106107015761070161177d565b156107c857610954600482611850565b5095945050505050565b606060006109e284846108d9565b905060008167ffffffffffffffff8111156109ff576109ff611672565b604051908082528060200260200182016040528015610a3257816020015b6060815260200190600190039081610a1d5790505b5090506060600085815b81831015610a8857610a4f8989856101f8565b809450819550505083858281518110610a6a57610a6a61177d565b60200260200101819052508080610a80906117d8565b915050610a3c565b5092979650505050505050565b606080836000805b858111610b1557610aaf8888846101f8565b909450915082821080610ac157508581145b610b035760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b604482015260640161025a565b80610b0d816117d8565b915050610a9d565b50919695505050505050565b600060608185815b81831015610b8457610b3c8989856101f8565b6040519195509350610b519088908890611840565b604051809103902084805190602001201415610b72579350610b8e92505050565b80610b7c816117d8565b915050610b29565b6000199450505050505b949350505050565b6000610b8e6101ea858585610a95565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525084519495509250829150505b82811015610fb857610c048482815181106102c7576102c761177d565b15610c1b57610c14600182611850565b9050610be7565b610c3a84610c2a836001611850565b815181106103225761032261177d565b15610c4c576000945050505050610861565b610c618482815181106103c2576103c261177d565b15610d1e57610ce3848281518110610c7b57610c7b61177d565b01602001516001600160f81b03191685610c96846001611850565b81518110610ca657610ca661177d565b016020908101516040516001600160f81b03199384169281019290925291909116602182015260220160405160208183030381529060405261121a565b915060808263ffffffff161080610d0157506107ff8263ffffffff16115b15610d13576000945050505050610861565b610c14600282611850565b610d2d84610c2a836002611850565b15610d3f576000945050505050610861565b610d548482815181106105445761054461177d565b15610e5057610e07848281518110610d6e57610d6e61177d565b01602001516001600160f81b03191685610d89846001611850565b81518110610d9957610d9961177d565b01602001516001600160f81b03191686610db4856002611850565b81518110610dc457610dc461177d565b016020908101516040516001600160f81b0319948516928101929092529183166021820152911660228201526023016040516020818303038152906040526112ad565b91506108008263ffffffff161015610e26576000945050505050610861565b601b621fffff600b84901c161415610e45576000945050505050610861565b610c14600382611850565b610e5f84610c2a836003611850565b15610e71576000945050505050610861565b610e868482815181106107015761070161177d565b15610fab57610f6c848281518110610ea057610ea061177d565b01602001516001600160f81b03191685610ebb846001611850565b81518110610ecb57610ecb61177d565b01602001516001600160f81b03191686610ee6856002611850565b81518110610ef657610ef661177d565b01602001516001600160f81b03191687610f11866003611850565b81518110610f2157610f2161177d565b016020908101516040516001600160f81b031995861692810192909252928416602182015290831660228201529116602382015260240160405160208183030381529060405261136a565b9150620100008263ffffffff16108015610f8e57506210ffff8263ffffffff16115b15610fa0576000945050505050610861565b610c14600482611850565b6000945050505050610861565b5060019695505050505050565b80516000908290600481111561104e5760405162461bcd60e51b815260206004820152604260248201527f696e76616c69642075746638206368617261637465723a20612063686172616360448201527f7465722063616e6e6f74206265206d6f7265207468616e20666f757220627974606482015261657360f01b608482015260a40161025a565b600081116110aa5760405162461bcd60e51b8152602060048201526024808201527f696e76616c69642075746638206368617261637465723a20656d70747920737460448201526372696e6760e01b606482015260840161025a565b6110c0826000815181106102c7576102c761177d565b156110e857816000815181106110d8576110d861177d565b016020015160f81c949350505050565b600181116111085760405162461bcd60e51b815260040161025a90611868565b61111e826000815181106103c2576103c261177d565b1561112c57610b8e8261121a565b6002811161114c5760405162461bcd60e51b815260040161025a90611868565b611162826000815181106105445761054461177d565b1561117057610b8e826112ad565b600381116111905760405162461bcd60e51b815260040161025a90611868565b6111a6826000815181106107015761070161177d565b156111b457610b8e8261136a565b60405162461bcd60e51b815260040161025a90611868565b6000607f60f81b82825b1a60f81b6001600160f81b03191611159050919050565b600081811a60f81b6001600160f81b031916606160f91b11801590610861575060df60f81b8260006111d6565b60008160018151811061122f5761122f61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff1660068360008151811061125b5761125b61177d565b602091010151611276929160f89190911c601f16901b611898565b61ffff1692915050565b600081811a60f81b6001600160f81b031916600760fd1b11801590610861575060ef60f81b8260006111d6565b6000816002815181106112c2576112c261177d565b602001015160f81c60f81b603f60f81b1660f81c60ff166006603f60f81b846001815181106112f3576112f361177d565b01602001518551911660f81c90911b90600c90600f60f81b90869060009061131d5761131d61177d565b01602001516113339392911660f81c901b611898565b6112769190611898565b600081811a60f81b6001600160f81b031916600f60fc1b118015906108615750603d60fa1b8260006111d6565b60008160038151811061137f5761137f61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff166006836002815181106113ab576113ab61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff1663ffffffff16901b600c846001815181106113df576113df61177d565b602001015160f81c60f81b603f60f81b1660f81c60ff1663ffffffff16901b6012856000815181106114135761141361177d565b60209101015161142e929160f89190911c600716901b6118be565b61143891906118be565b61086191906118be565b60008083601f84011261145457600080fd5b50813567ffffffffffffffff81111561146c57600080fd5b60208301915083602082850101111561148457600080fd5b9250929050565b6000806000604084860312156114a057600080fd5b833567ffffffffffffffff8111156114b757600080fd5b6114c386828701611442565b909790965060209590950135949350505050565b60005b838110156114f25781810151838201526020016114da565b83811115611501576000848401525b50505050565b6000815180845261151f8160208601602086016114d7565b601f01601f19169290920160200192915050565b6040815260006115466040830185611507565b90508260208301529392505050565b6000806020838503121561156857600080fd5b823567ffffffffffffffff81111561157f57600080fd5b61158b85828601611442565b90969095509350505050565b600080600080604085870312156115ad57600080fd5b843567ffffffffffffffff808211156115c557600080fd5b6115d188838901611442565b909650945060208701359150808211156115ea57600080fd5b506115f787828801611442565b95989497509550505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610a8857603f19888603018452611646858351611507565b9450928501929085019060010161162a565b60208152600061166b6020830184611507565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561169a57600080fd5b813567ffffffffffffffff808211156116b257600080fd5b818401915084601f8301126116c657600080fd5b8135818111156116d8576116d8611672565b604051601f8201601f19908116603f0116810190838211818310171561170057611700611672565b8160405282815287602084870101111561171957600080fd5b826020860160208301376000928101602001929092525095945050505050565b60208082526024908201527f696e76616c696420637572736f723a20637572736f72206f7574206f6620626f604082015263756e647360e01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b600083516117a58184602088016114d7565b6001600160f81b0319939093169190920190815260010192915050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156117ec576117ec6117c2565b5060010190565b6020808252602d908201527f6f6e6c792062697420372073686f756c6420636f6e7461696e206120636f6e7460408201526c696e756174696f6e206279746560981b606082015260800190565b8183823760009101908152919050565b60008219821115611863576118636117c2565b500190565b60208082526016908201527534b73b30b634b2103aba331c1031b430b930b1ba32b960511b604082015260600190565b600061ffff8083168185168083038211156118b5576118b56117c2565b01949350505050565b600063ffffffff8083168185168083038211156118b5576118b56117c256fea26469706673582212206cdadf76a5743d5ad6818d1adab4bbba7d4207cccf744190230ed4f9846efde264736f6c63430008090033",
  "devdoc": {
    "author": "Devin Stein",
    "details": "All external and public functions use self as their first parameter to allow \"using Unicode for strings;\". If you have ideas for new functions or improvements, please contribute!",
    "kind": "dev",
    "methods": {
      "bytesIndicesOf(string,string)": {
        "details": "bytesIndicesOf returns (CHAR_NOT_FOUND, CHAR_NOT_FOUND) if `_of` isn't found in `self`",
        "params": {
          "_of": "The character to find the bytes indices of",
          "self": "The input string"
        },
        "returns": {
          "_0": "The starting (inclusive) and ending (exclusive) indites the character in the bytes underlying the string"
        }
      },
      "charAt(string,uint256)": {
        "details": "charAt will error if the idx is out of bounds",
        "params": {
          "_idx": "The index of the character to get",
          "self": "The input string"
        },
        "returns": {
          "_0": "The character at the given index"
        }
      },
      "codePointAt(string,uint256)": {
        "details": "codePointAt requires a valid UTF-8 string",
        "params": {
          "_idx": "The index of the code point to get",
          "self": "The input string"
        },
        "returns": {
          "_0": "The Unicode code point at the given index"
        }
      },
      "decode(string)": {
        "params": {
          "self": "The input string"
        },
        "returns": {
          "_0": "An ordered array of all UTF-8 characters  in `self`"
        }
      },
      "decodeChar(string,uint256)": {
        "details": "decodeChar is useful for functions want to iterate over the string in one pass and check each category for a condition",
        "params": {
          "_cursor": "The starting bytes position (inclusive) of the character",
          "self": "The input string"
        },
        "returns": {
          "_0": "The next character as a string and the starting position of the next character."
        }
      },
      "indexOf(string,string)": {
        "details": "indexOf returns CHAR_NOT_FOUND if `_of` isn't found in `self`",
        "params": {
          "_of": "The character to find the index of",
          "self": "The input string"
        },
        "returns": {
          "_0": "The index of the character in the given string"
        }
      },
      "isASCII(string)": {
        "details": "If a string is only ASCII, then it's safe to treat each byte as a character. This returns false for extended ASCII (128-255) because they are use two bytes in UTF-8.",
        "params": {
          "self": "The input string"
        },
        "returns": {
          "_0": "True if  the `self` only contains ASCII"
        }
      },
      "isUTF8(string)": {
        "params": {
          "self": "The input string"
        },
        "returns": {
          "_0": "True if the string is UTF-8 encoded"
        }
      },
      "length(string)": {
        "details": "For efficiency, length assumes valid UTF-8 encoded input. It only does simple checks for bytes sequences",
        "params": {
          "self": "The input string"
        },
        "returns": {
          "_0": "The number of UTF-8 characters in `self`"
        }
      },
      "toCodePoint(string)": {
        "details": "This function requires a valid UTF-8 character",
        "params": {
          "self": "The input character"
        },
        "returns": {
          "_0": "The code point of `self`"
        }
      }
    },
    "stateVariables": {
      "CHAR_NOT_FOUND": {
        "details": "Use CHAR_NOT_FOUND to check if indexOf or bytesIndicesOf does not find the inputted character"
      }
    },
    "title": "A library for validating, parsing, and manipulating UTF-8 encoded Unicode strings",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CHAR_NOT_FOUND()": {
        "notice": "The return value of indexOf and bytesIndicesOf if the character is not found"
      },
      "bytesIndicesOf(string,string)": {
        "notice": "Get the starting (inclusive) and ending (exclusive) bytes indices of character `_of` in string `self`"
      },
      "charAt(string,uint256)": {
        "notice": "Get the UTF-8 character at `_idx` for `self`"
      },
      "codePointAt(string,uint256)": {
        "notice": "Get the Unicode code point at `_idx` for `self`"
      },
      "decode(string)": {
        "notice": "Decode every UTF-8 characters in `self`"
      },
      "decodeChar(string,uint256)": {
        "notice": "Decode the next UTF-8 character in `self` given a starting position of `_cursor`"
      },
      "indexOf(string,string)": {
        "notice": "Get the character index of `_of` in string `self`"
      },
      "isASCII(string)": {
        "notice": "Check if `self` contains only single byte ASCII characters (0-127)"
      },
      "isUTF8(string)": {
        "notice": "Check if `self` is valid UTF-8"
      },
      "length(string)": {
        "notice": "Get length of `self`"
      },
      "toCodePoint(string)": {
        "notice": "Get the code point of character: `self`"
      }
    },
    "notice": "For character introspection or more complex transformations, checkout the UnicodeData contract.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}